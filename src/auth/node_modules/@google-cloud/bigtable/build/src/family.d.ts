import { CallOptions } from 'google-gax';
import { ServiceError } from 'google-gax';
import { Bigtable } from './';
import { Table } from './table';
import { google } from '../protos/protos';
export declare type IColumnFamily = google.bigtable.admin.v2.IColumnFamily;
export declare type IGcRule = google.bigtable.admin.v2.IGcRule;
export declare type IModification = google.bigtable.admin.v2.ModifyColumnFamiliesRequest.IModification;
export declare type ITable = google.bigtable.admin.v2.ITable;
export interface RequestCallback<R> {
    (err: null | ServiceError, response?: null | R): void;
}
export interface InstanceCallback<I, R> {
    (err: null | ServiceError, instance?: null | I, response?: null | R): void;
}
export interface GcRule {
    age?: google.protobuf.IDuration | number;
    versions?: number;
    rule?: GcRule;
    union?: boolean;
}
export interface CreateFamilyOptions {
    rule?: GcRule;
    gaxOptions?: CallOptions;
}
export declare type CreateFamilyResponse = [Family, ITable];
export declare type CreateFamilyCallback = InstanceCallback<Family, ITable>;
export declare type DeleteFamilyResponse = [ITable];
export declare type DeleteFamilyCallback = RequestCallback<ITable>;
export declare type FamilyExistsResponse = [boolean];
export declare type FamilyExistsCallback = RequestCallback<boolean>;
export interface GetFamilyOptions {
    autoCreate?: boolean;
    gaxOptions?: CallOptions;
    rule?: GcRule;
}
export declare type GetFamilyResponse = [Family, IColumnFamily | ITable];
export declare type GetFamilyCallback = InstanceCallback<Family, IColumnFamily | ITable>;
export declare type GetFamilyMetadataResponse = [IColumnFamily];
export declare type GetFamilyMetadataCallback = RequestCallback<IColumnFamily>;
export interface SetFamilyMetadataOptions {
    rule?: GcRule;
}
export declare type SetFamilyMetadataResponse = [IColumnFamily, ITable];
export declare type SetFamilyMetadataCallback = InstanceCallback<IColumnFamily, ITable>;
/**
 * @private
 */
export declare class FamilyError extends Error {
    code: number;
    constructor(name: string);
}
/**
 * Create a Family object to interact with your table column families.
 *
 * @class
 * @param {Table} table
 * @param {string} id
 *
 * @example
 * ```
 * const {Bigtable} = require('@google-cloud/bigtable');
 * const bigtable = new Bigtable();
 * const instance = bigtable.instance('my-instance');
 * const table = instance.table('prezzy');
 * const family = table.family('follows');
 * ```
 */
export declare class Family {
    bigtable: Bigtable;
    table: Table;
    name: string;
    id: string;
    metadata?: IColumnFamily;
    constructor(table: Table, id: string);
    /**
     * Formats Garbage Collection rule into proto format.
     *
     * @private
     *
     * @param {object} ruleObj The rule object.
     * @returns {object}
     *
     * @example
     * ```
     * Family.formatRule({
     *   age: {
     *     seconds: 10000,
     *     nanos: 10000
     *   },
     *   versions: 2,
     *   union: true
     * });
     * // {
     * //   union: {
     * //     rules: [
     * //       {
     * //         maxAge: {
     * //           seconds: 10000,
     * //           nanos: 10000
     * //         }
     * //       }, {
     * //         maxNumVersions: 2
     * //       }
     * //     ]
     * //   }
     * // }
     * ```
     */
    static formatRule_(ruleObj: GcRule): IGcRule;
    create(options?: CreateFamilyOptions): Promise<CreateFamilyResponse>;
    create(options: CreateFamilyOptions, callback: CreateFamilyCallback): void;
    create(callback: CreateFamilyCallback): void;
    delete(gaxOptions?: CallOptions): Promise<DeleteFamilyResponse>;
    delete(gaxOptions: CallOptions, callback: DeleteFamilyCallback): void;
    delete(callback: DeleteFamilyCallback): void;
    exists(gaxOptions?: CallOptions): Promise<FamilyExistsResponse>;
    exists(gaxOptions: CallOptions, callback: FamilyExistsCallback): void;
    exists(callback: FamilyExistsCallback): void;
    get(options?: GetFamilyOptions): Promise<GetFamilyResponse>;
    get(options: GetFamilyOptions, callback: GetFamilyCallback): void;
    get(callback: GetFamilyCallback): void;
    getMetadata(gaxOptions?: CallOptions): Promise<GetFamilyMetadataResponse>;
    getMetadata(gaxOptions: CallOptions, callback: GetFamilyMetadataCallback): void;
    getMetadata(callback: GetFamilyMetadataCallback): void;
    setMetadata(metadata: SetFamilyMetadataOptions, gaxOptions?: CallOptions): Promise<SetFamilyMetadataResponse>;
    setMetadata(metadata: SetFamilyMetadataOptions, gaxOptions: CallOptions, callback: SetFamilyMetadataCallback): void;
    setMetadata(metadata: SetFamilyMetadataOptions, callback: SetFamilyMetadataCallback): void;
}
