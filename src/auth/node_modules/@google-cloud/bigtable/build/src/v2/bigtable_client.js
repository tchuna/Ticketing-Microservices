"use strict";
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
Object.defineProperty(exports, "__esModule", { value: true });
exports.BigtableClient = void 0;
/* global window */
const gax = require("google-gax");
const google_gax_1 = require("google-gax");
const stream_1 = require("stream");
const jsonProtos = require("../../protos/protos.json");
/**
 * Client JSON configuration object, loaded from
 * `src/v2/bigtable_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
const gapicConfig = require("./bigtable_client_config.json");
const version = require('../../../package.json').version;
/**
 *  Service for reading from and writing to existing Bigtable tables.
 * @class
 * @memberof v2
 */
class BigtableClient {
    /**
     * Construct an instance of BigtableClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP fallback mode.
     *     In fallback mode, a special browser-compatible transport implementation is used
     *     instead of gRPC transport. In browser context (if the `window` object is defined)
     *     the fallback mode is enabled automatically; set `options.fallback` to `false`
     *     if you need to override this behavior.
     */
    constructor(opts) {
        var _a, _b;
        this._terminated = false;
        this.descriptors = {
            page: {},
            stream: {},
            longrunning: {},
            batching: {},
        };
        // Ensure that options include all the required fields.
        const staticMembers = this.constructor;
        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;
        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));
        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;
        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};
        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');
        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);
        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
        if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
            opts['scopes'] = staticMembers.scopes;
        }
        // Choose either gRPC or proto-over-HTTP implementation of google-gax.
        this._gaxModule = opts.fallback ? gax.fallback : gax;
        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);
        // Save options to use in initialize() method.
        this._opts = opts;
        // Save the auth object to the client, for use by other methods.
        this.auth = this._gaxGrpc.auth;
        // Set useJWTAccessWithScope on the auth object.
        this.auth.useJWTAccessWithScope = true;
        // Set defaultServicePath on the auth object.
        this.auth.defaultServicePath = staticMembers.servicePath;
        // Set the default scopes in auth client if needed.
        if (servicePath === staticMembers.servicePath) {
            this.auth.defaultScopes = staticMembers.scopes;
        }
        // Determine the client header string.
        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
        if (typeof process !== 'undefined' && 'versions' in process) {
            clientHeader.push(`gl-node/${process.versions.node}`);
        }
        else {
            clientHeader.push(`gl-web/${this._gaxModule.version}`);
        }
        if (!opts.fallback) {
            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
        }
        else if (opts.fallback === 'rest') {
            clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
        }
        if (opts.libName && opts.libVersion) {
            clientHeader.push(`${opts.libName}/${opts.libVersion}`);
        }
        // Load the applicable protos.
        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);
        // This API contains "path templates"; forward-slash-separated
        // identifiers to uniquely identify resources within the API.
        // Create useful helper objects for these.
        this.pathTemplates = {
            instancePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/instances/{instance}'),
            tablePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/instances/{instance}/tables/{table}'),
        };
        // Some of the methods on this service provide streaming responses.
        // Provide descriptors for these.
        this.descriptors.stream = {
            readRows: new this._gaxModule.StreamDescriptor(gax.StreamType.SERVER_STREAMING),
            sampleRowKeys: new this._gaxModule.StreamDescriptor(gax.StreamType.SERVER_STREAMING),
            mutateRows: new this._gaxModule.StreamDescriptor(gax.StreamType.SERVER_STREAMING),
        };
        // Put together the default options sent with requests.
        this._defaults = this._gaxGrpc.constructSettings('google.bigtable.v2.Bigtable', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });
        // Set up a dictionary of "inner API calls"; the core implementation
        // of calling the API is handled in `google-gax`, with this code
        // merely providing the destination and request information.
        this.innerApiCalls = {};
        // Add a warn function to the client constructor so it can be easily tested.
        this.warn = gax.warn;
    }
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize() {
        // If the client stub promise is already initialized, return immediately.
        if (this.bigtableStub) {
            return this.bigtableStub;
        }
        // Put together the "service stub" for
        // google.bigtable.v2.Bigtable.
        this.bigtableStub = this._gaxGrpc.createStub(this._opts.fallback
            ? this._protos.lookupService('google.bigtable.v2.Bigtable')
            : // eslint-disable-next-line @typescript-eslint/no-explicit-any
                this._protos.google.bigtable.v2.Bigtable, this._opts, this._providedCustomServicePath);
        // Iterate over each of the methods that the service provides
        // and create an API call method for each.
        const bigtableStubMethods = [
            'readRows',
            'sampleRowKeys',
            'mutateRow',
            'mutateRows',
            'checkAndMutateRow',
            'pingAndWarm',
            'readModifyWriteRow',
        ];
        for (const methodName of bigtableStubMethods) {
            const callPromise = this.bigtableStub.then(stub => (...args) => {
                if (this._terminated) {
                    if (methodName in this.descriptors.stream) {
                        const stream = new stream_1.PassThrough();
                        setImmediate(() => {
                            stream.emit('error', new google_gax_1.GoogleError('The client has already been closed.'));
                        });
                        return stream;
                    }
                    return Promise.reject('The client has already been closed.');
                }
                const func = stub[methodName];
                return func.apply(stub, args);
            }, (err) => () => {
                throw err;
            });
            const descriptor = this.descriptors.stream[methodName] || undefined;
            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor);
            this.innerApiCalls[methodName] = apiCall;
        }
        return this.bigtableStub;
    }
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath() {
        return 'bigtable.googleapis.com';
    }
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint() {
        return 'bigtable.googleapis.com';
    }
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port() {
        return 443;
    }
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes() {
        return [
            'https://www.googleapis.com/auth/bigtable.data',
            'https://www.googleapis.com/auth/bigtable.data.readonly',
            'https://www.googleapis.com/auth/cloud-bigtable.data',
            'https://www.googleapis.com/auth/cloud-bigtable.data.readonly',
            'https://www.googleapis.com/auth/cloud-platform',
            'https://www.googleapis.com/auth/cloud-platform.read-only',
        ];
    }
    /**
     * Return the project ID used by this class.
     * @returns {Promise} A promise that resolves to string containing the project ID.
     */
    getProjectId(callback) {
        if (callback) {
            this.auth.getProjectId(callback);
            return;
        }
        return this.auth.getProjectId();
    }
    mutateRow(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        const routingParameter = {};
        if (typeof request.tableName !== 'undefined' &&
            RegExp('(?<table_name>projects)/[^/]+/instances/[^/]+/tables/[^/]+').test(request.tableName)) {
            Object.assign(routingParameter, {
                table_name: request.tableName.match(RegExp('(?<table_name>projects/[^/]+/instances/[^/]+/tables/[^/]+)'))[0],
            });
        }
        if (typeof request.appProfileId !== 'undefined' &&
            RegExp('[^/]+').test(request.appProfileId)) {
            Object.assign(routingParameter, {
                app_profile_id: request.appProfileId.match(RegExp('[^/]+'))[0],
            });
        }
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams(routingParameter);
        this.initialize();
        return this.innerApiCalls.mutateRow(request, options, callback);
    }
    checkAndMutateRow(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        const routingParameter = {};
        if (typeof request.tableName !== 'undefined' &&
            RegExp('(?<table_name>projects)/[^/]+/instances/[^/]+/tables/[^/]+').test(request.tableName)) {
            Object.assign(routingParameter, {
                table_name: request.tableName.match(RegExp('(?<table_name>projects/[^/]+/instances/[^/]+/tables/[^/]+)'))[0],
            });
        }
        if (typeof request.appProfileId !== 'undefined' &&
            RegExp('[^/]+').test(request.appProfileId)) {
            Object.assign(routingParameter, {
                app_profile_id: request.appProfileId.match(RegExp('[^/]+'))[0],
            });
        }
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams(routingParameter);
        this.initialize();
        return this.innerApiCalls.checkAndMutateRow(request, options, callback);
    }
    pingAndWarm(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        const routingParameter = {};
        if (typeof request.name !== 'undefined' &&
            RegExp('(?<name>projects)/[^/]+/instances/[^/]+').test(request.name)) {
            Object.assign(routingParameter, {
                name: request.name.match(RegExp('(?<name>projects/[^/]+/instances/[^/]+)'))[0],
            });
        }
        if (typeof request.appProfileId !== 'undefined' &&
            RegExp('[^/]+').test(request.appProfileId)) {
            Object.assign(routingParameter, {
                app_profile_id: request.appProfileId.match(RegExp('[^/]+'))[0],
            });
        }
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams(routingParameter);
        this.initialize();
        return this.innerApiCalls.pingAndWarm(request, options, callback);
    }
    readModifyWriteRow(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        const routingParameter = {};
        if (typeof request.tableName !== 'undefined' &&
            RegExp('(?<table_name>projects)/[^/]+/instances/[^/]+/tables/[^/]+').test(request.tableName)) {
            Object.assign(routingParameter, {
                table_name: request.tableName.match(RegExp('(?<table_name>projects/[^/]+/instances/[^/]+/tables/[^/]+)'))[0],
            });
        }
        if (typeof request.appProfileId !== 'undefined' &&
            RegExp('[^/]+').test(request.appProfileId)) {
            Object.assign(routingParameter, {
                app_profile_id: request.appProfileId.match(RegExp('[^/]+'))[0],
            });
        }
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams(routingParameter);
        this.initialize();
        return this.innerApiCalls.readModifyWriteRow(request, options, callback);
    }
    /**
     * Streams back the contents of all requested rows in key order, optionally
     * applying the same Reader filter to each. Depending on their size,
     * rows and cells may be broken up across multiple responses, but
     * atomicity of each row will still be preserved. See the
     * ReadRowsResponse documentation for details.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.tableName
     *   Required. The unique name of the table from which to read.
     *   Values are of the form
     *   `projects/<project>/instances/<instance>/tables/<table>`.
     * @param {string} request.appProfileId
     *   This value specifies routing for replication. If not specified, the
     *   "default" application profile will be used.
     * @param {google.bigtable.v2.RowSet} request.rows
     *   The row keys and/or ranges to read sequentially. If not specified, reads
     *   from all rows.
     * @param {google.bigtable.v2.RowFilter} request.filter
     *   The filter to apply to the contents of the specified row(s). If unset,
     *   reads the entirety of each row.
     * @param {number} request.rowsLimit
     *   The read will stop after committing to N rows' worth of results. The
     *   default (zero) is to return all results.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits [ReadRowsResponse]{@link google.bigtable.v2.ReadRowsResponse} on 'data' event.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#server-streaming)
     *   for more details and examples.
     */
    readRows(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        const routingParameter = {};
        if (typeof request.tableName !== 'undefined' &&
            RegExp('(?<table_name>projects)/[^/]+/instances/[^/]+/tables/[^/]+').test(request.tableName)) {
            Object.assign(routingParameter, {
                table_name: request.tableName.match(RegExp('(?<table_name>projects/[^/]+/instances/[^/]+/tables/[^/]+)'))[0],
            });
        }
        if (typeof request.appProfileId !== 'undefined' &&
            RegExp('[^/]+').test(request.appProfileId)) {
            Object.assign(routingParameter, {
                app_profile_id: request.appProfileId.match(RegExp('[^/]+'))[0],
            });
        }
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams(routingParameter);
        this.initialize();
        return this.innerApiCalls.readRows(request, options);
    }
    /**
     * Returns a sample of row keys in the table. The returned row keys will
     * delimit contiguous sections of the table of approximately equal size,
     * which can be used to break up the data for distributed tasks like
     * mapreduces.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.tableName
     *   Required. The unique name of the table from which to sample row keys.
     *   Values are of the form
     *   `projects/<project>/instances/<instance>/tables/<table>`.
     * @param {string} request.appProfileId
     *   This value specifies routing for replication. If not specified, the
     *   "default" application profile will be used.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits [SampleRowKeysResponse]{@link google.bigtable.v2.SampleRowKeysResponse} on 'data' event.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#server-streaming)
     *   for more details and examples.
     */
    sampleRowKeys(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        const routingParameter = {};
        if (typeof request.tableName !== 'undefined' &&
            RegExp('(?<table_name>projects)/[^/]+/instances/[^/]+/tables/[^/]+').test(request.tableName)) {
            Object.assign(routingParameter, {
                table_name: request.tableName.match(RegExp('(?<table_name>projects/[^/]+/instances/[^/]+/tables/[^/]+)'))[0],
            });
        }
        if (typeof request.appProfileId !== 'undefined' &&
            RegExp('[^/]+').test(request.appProfileId)) {
            Object.assign(routingParameter, {
                app_profile_id: request.appProfileId.match(RegExp('[^/]+'))[0],
            });
        }
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams(routingParameter);
        this.initialize();
        return this.innerApiCalls.sampleRowKeys(request, options);
    }
    /**
     * Mutates multiple rows in a batch. Each individual row is mutated
     * atomically as in MutateRow, but the entire batch is not executed
     * atomically.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.tableName
     *   Required. The unique name of the table to which the mutations should be applied.
     * @param {string} request.appProfileId
     *   This value specifies routing for replication. If not specified, the
     *   "default" application profile will be used.
     * @param {number[]} request.entries
     *   Required. The row keys and corresponding mutations to be applied in bulk.
     *   Each entry is applied as an atomic mutation, but the entries may be
     *   applied in arbitrary order (even between entries for the same row).
     *   At least one entry must be specified, and in total the entries can
     *   contain at most 100000 mutations.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits [MutateRowsResponse]{@link google.bigtable.v2.MutateRowsResponse} on 'data' event.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#server-streaming)
     *   for more details and examples.
     */
    mutateRows(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        const routingParameter = {};
        if (typeof request.tableName !== 'undefined' &&
            RegExp('(?<table_name>projects)/[^/]+/instances/[^/]+/tables/[^/]+').test(request.tableName)) {
            Object.assign(routingParameter, {
                table_name: request.tableName.match(RegExp('(?<table_name>projects/[^/]+/instances/[^/]+/tables/[^/]+)'))[0],
            });
        }
        if (typeof request.appProfileId !== 'undefined' &&
            RegExp('[^/]+').test(request.appProfileId)) {
            Object.assign(routingParameter, {
                app_profile_id: request.appProfileId.match(RegExp('[^/]+'))[0],
            });
        }
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams(routingParameter);
        this.initialize();
        return this.innerApiCalls.mutateRows(request, options);
    }
    // --------------------
    // -- Path templates --
    // --------------------
    /**
     * Return a fully-qualified instance resource name string.
     *
     * @param {string} project
     * @param {string} instance
     * @returns {string} Resource name string.
     */
    instancePath(project, instance) {
        return this.pathTemplates.instancePathTemplate.render({
            project: project,
            instance: instance,
        });
    }
    /**
     * Parse the project from Instance resource.
     *
     * @param {string} instanceName
     *   A fully-qualified path representing Instance resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromInstanceName(instanceName) {
        return this.pathTemplates.instancePathTemplate.match(instanceName).project;
    }
    /**
     * Parse the instance from Instance resource.
     *
     * @param {string} instanceName
     *   A fully-qualified path representing Instance resource.
     * @returns {string} A string representing the instance.
     */
    matchInstanceFromInstanceName(instanceName) {
        return this.pathTemplates.instancePathTemplate.match(instanceName).instance;
    }
    /**
     * Return a fully-qualified table resource name string.
     *
     * @param {string} project
     * @param {string} instance
     * @param {string} table
     * @returns {string} Resource name string.
     */
    tablePath(project, instance, table) {
        return this.pathTemplates.tablePathTemplate.render({
            project: project,
            instance: instance,
            table: table,
        });
    }
    /**
     * Parse the project from Table resource.
     *
     * @param {string} tableName
     *   A fully-qualified path representing Table resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTableName(tableName) {
        return this.pathTemplates.tablePathTemplate.match(tableName).project;
    }
    /**
     * Parse the instance from Table resource.
     *
     * @param {string} tableName
     *   A fully-qualified path representing Table resource.
     * @returns {string} A string representing the instance.
     */
    matchInstanceFromTableName(tableName) {
        return this.pathTemplates.tablePathTemplate.match(tableName).instance;
    }
    /**
     * Parse the table from Table resource.
     *
     * @param {string} tableName
     *   A fully-qualified path representing Table resource.
     * @returns {string} A string representing the table.
     */
    matchTableFromTableName(tableName) {
        return this.pathTemplates.tablePathTemplate.match(tableName).table;
    }
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close() {
        if (this.bigtableStub && !this._terminated) {
            return this.bigtableStub.then(stub => {
                this._terminated = true;
                stub.close();
            });
        }
        return Promise.resolve();
    }
}
exports.BigtableClient = BigtableClient;
//# sourceMappingURL=bigtable_client.js.map