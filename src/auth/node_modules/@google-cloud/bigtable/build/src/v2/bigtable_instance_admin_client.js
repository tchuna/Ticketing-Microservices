"use strict";
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
Object.defineProperty(exports, "__esModule", { value: true });
exports.BigtableInstanceAdminClient = void 0;
/* global window */
const gax = require("google-gax");
const jsonProtos = require("../../protos/protos.json");
/**
 * Client JSON configuration object, loaded from
 * `src/v2/bigtable_instance_admin_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
const gapicConfig = require("./bigtable_instance_admin_client_config.json");
const google_gax_1 = require("google-gax");
const version = require('../../../package.json').version;
/**
 *  Service for creating, configuring, and deleting Cloud Bigtable Instances and
 *  Clusters. Provides access to the Instance and Cluster schemas only, not the
 *  tables' metadata or data stored in those tables.
 * @class
 * @memberof v2
 */
class BigtableInstanceAdminClient {
    /**
     * Construct an instance of BigtableInstanceAdminClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP fallback mode.
     *     In fallback mode, a special browser-compatible transport implementation is used
     *     instead of gRPC transport. In browser context (if the `window` object is defined)
     *     the fallback mode is enabled automatically; set `options.fallback` to `false`
     *     if you need to override this behavior.
     */
    constructor(opts) {
        var _a, _b;
        this._terminated = false;
        this.descriptors = {
            page: {},
            stream: {},
            longrunning: {},
            batching: {},
        };
        // Ensure that options include all the required fields.
        const staticMembers = this
            .constructor;
        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;
        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));
        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;
        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};
        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');
        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);
        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
        if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
            opts['scopes'] = staticMembers.scopes;
        }
        // Choose either gRPC or proto-over-HTTP implementation of google-gax.
        this._gaxModule = opts.fallback ? gax.fallback : gax;
        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);
        // Save options to use in initialize() method.
        this._opts = opts;
        // Save the auth object to the client, for use by other methods.
        this.auth = this._gaxGrpc.auth;
        // Set useJWTAccessWithScope on the auth object.
        this.auth.useJWTAccessWithScope = true;
        // Set defaultServicePath on the auth object.
        this.auth.defaultServicePath = staticMembers.servicePath;
        // Set the default scopes in auth client if needed.
        if (servicePath === staticMembers.servicePath) {
            this.auth.defaultScopes = staticMembers.scopes;
        }
        // Determine the client header string.
        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
        if (typeof process !== 'undefined' && 'versions' in process) {
            clientHeader.push(`gl-node/${process.versions.node}`);
        }
        else {
            clientHeader.push(`gl-web/${this._gaxModule.version}`);
        }
        if (!opts.fallback) {
            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
        }
        else if (opts.fallback === 'rest') {
            clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
        }
        if (opts.libName && opts.libVersion) {
            clientHeader.push(`${opts.libName}/${opts.libVersion}`);
        }
        // Load the applicable protos.
        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);
        // This API contains "path templates"; forward-slash-separated
        // identifiers to uniquely identify resources within the API.
        // Create useful helper objects for these.
        this.pathTemplates = {
            appProfilePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/instances/{instance}/appProfiles/{app_profile}'),
            backupPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/instances/{instance}/clusters/{cluster}/backups/{backup}'),
            clusterPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/instances/{instance}/clusters/{cluster}'),
            hotTabletPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/instances/{instance}/clusters/{cluster}/hotTablets/{hot_tablet}'),
            instancePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/instances/{instance}'),
            projectPathTemplate: new this._gaxModule.PathTemplate('projects/{project}'),
            snapshotPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/instances/{instance}/clusters/{cluster}/snapshots/{snapshot}'),
            tablePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/instances/{instance}/tables/{table}'),
        };
        // Some of the methods on this service return "paged" results,
        // (e.g. 50 results at a time, with tokens to get subsequent
        // pages). Denote the keys used for pagination and results.
        this.descriptors.page = {
            listAppProfiles: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'appProfiles'),
            listHotTablets: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'hotTablets'),
        };
        const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
        // This API contains "long-running operations", which return a
        // an Operation object that allows for tracking of the operation,
        // rather than holding a request open.
        this.operationsClient = this._gaxModule
            .lro({
            auth: this.auth,
            grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
        })
            .operationsClient(opts);
        const createInstanceResponse = protoFilesRoot.lookup('.google.bigtable.admin.v2.Instance');
        const createInstanceMetadata = protoFilesRoot.lookup('.google.bigtable.admin.v2.CreateInstanceMetadata');
        const partialUpdateInstanceResponse = protoFilesRoot.lookup('.google.bigtable.admin.v2.Instance');
        const partialUpdateInstanceMetadata = protoFilesRoot.lookup('.google.bigtable.admin.v2.UpdateInstanceMetadata');
        const createClusterResponse = protoFilesRoot.lookup('.google.bigtable.admin.v2.Cluster');
        const createClusterMetadata = protoFilesRoot.lookup('.google.bigtable.admin.v2.CreateClusterMetadata');
        const updateClusterResponse = protoFilesRoot.lookup('.google.bigtable.admin.v2.Cluster');
        const updateClusterMetadata = protoFilesRoot.lookup('.google.bigtable.admin.v2.UpdateClusterMetadata');
        const partialUpdateClusterResponse = protoFilesRoot.lookup('.google.bigtable.admin.v2.Cluster');
        const partialUpdateClusterMetadata = protoFilesRoot.lookup('.google.bigtable.admin.v2.PartialUpdateClusterMetadata');
        const updateAppProfileResponse = protoFilesRoot.lookup('.google.bigtable.admin.v2.AppProfile');
        const updateAppProfileMetadata = protoFilesRoot.lookup('.google.bigtable.admin.v2.UpdateAppProfileMetadata');
        this.descriptors.longrunning = {
            createInstance: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createInstanceResponse.decode.bind(createInstanceResponse), createInstanceMetadata.decode.bind(createInstanceMetadata)),
            partialUpdateInstance: new this._gaxModule.LongrunningDescriptor(this.operationsClient, partialUpdateInstanceResponse.decode.bind(partialUpdateInstanceResponse), partialUpdateInstanceMetadata.decode.bind(partialUpdateInstanceMetadata)),
            createCluster: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createClusterResponse.decode.bind(createClusterResponse), createClusterMetadata.decode.bind(createClusterMetadata)),
            updateCluster: new this._gaxModule.LongrunningDescriptor(this.operationsClient, updateClusterResponse.decode.bind(updateClusterResponse), updateClusterMetadata.decode.bind(updateClusterMetadata)),
            partialUpdateCluster: new this._gaxModule.LongrunningDescriptor(this.operationsClient, partialUpdateClusterResponse.decode.bind(partialUpdateClusterResponse), partialUpdateClusterMetadata.decode.bind(partialUpdateClusterMetadata)),
            updateAppProfile: new this._gaxModule.LongrunningDescriptor(this.operationsClient, updateAppProfileResponse.decode.bind(updateAppProfileResponse), updateAppProfileMetadata.decode.bind(updateAppProfileMetadata)),
        };
        // Put together the default options sent with requests.
        this._defaults = this._gaxGrpc.constructSettings('google.bigtable.admin.v2.BigtableInstanceAdmin', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });
        // Set up a dictionary of "inner API calls"; the core implementation
        // of calling the API is handled in `google-gax`, with this code
        // merely providing the destination and request information.
        this.innerApiCalls = {};
        // Add a warn function to the client constructor so it can be easily tested.
        this.warn = gax.warn;
    }
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize() {
        // If the client stub promise is already initialized, return immediately.
        if (this.bigtableInstanceAdminStub) {
            return this.bigtableInstanceAdminStub;
        }
        // Put together the "service stub" for
        // google.bigtable.admin.v2.BigtableInstanceAdmin.
        this.bigtableInstanceAdminStub = this._gaxGrpc.createStub(this._opts.fallback
            ? this._protos.lookupService('google.bigtable.admin.v2.BigtableInstanceAdmin')
            : // eslint-disable-next-line @typescript-eslint/no-explicit-any
                this._protos.google.bigtable.admin.v2.BigtableInstanceAdmin, this._opts, this._providedCustomServicePath);
        // Iterate over each of the methods that the service provides
        // and create an API call method for each.
        const bigtableInstanceAdminStubMethods = [
            'createInstance',
            'getInstance',
            'listInstances',
            'updateInstance',
            'partialUpdateInstance',
            'deleteInstance',
            'createCluster',
            'getCluster',
            'listClusters',
            'updateCluster',
            'partialUpdateCluster',
            'deleteCluster',
            'createAppProfile',
            'getAppProfile',
            'listAppProfiles',
            'updateAppProfile',
            'deleteAppProfile',
            'getIamPolicy',
            'setIamPolicy',
            'testIamPermissions',
            'listHotTablets',
        ];
        for (const methodName of bigtableInstanceAdminStubMethods) {
            const callPromise = this.bigtableInstanceAdminStub.then(stub => (...args) => {
                if (this._terminated) {
                    return Promise.reject('The client has already been closed.');
                }
                const func = stub[methodName];
                return func.apply(stub, args);
            }, (err) => () => {
                throw err;
            });
            const descriptor = this.descriptors.page[methodName] ||
                this.descriptors.longrunning[methodName] ||
                undefined;
            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor);
            this.innerApiCalls[methodName] = apiCall;
        }
        return this.bigtableInstanceAdminStub;
    }
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath() {
        return 'bigtableadmin.googleapis.com';
    }
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint() {
        return 'bigtableadmin.googleapis.com';
    }
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port() {
        return 443;
    }
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes() {
        return [
            'https://www.googleapis.com/auth/bigtable.admin',
            'https://www.googleapis.com/auth/bigtable.admin.cluster',
            'https://www.googleapis.com/auth/bigtable.admin.instance',
            'https://www.googleapis.com/auth/cloud-bigtable.admin',
            'https://www.googleapis.com/auth/cloud-bigtable.admin.cluster',
            'https://www.googleapis.com/auth/cloud-platform',
            'https://www.googleapis.com/auth/cloud-platform.read-only',
        ];
    }
    /**
     * Return the project ID used by this class.
     * @returns {Promise} A promise that resolves to string containing the project ID.
     */
    getProjectId(callback) {
        if (callback) {
            this.auth.getProjectId(callback);
            return;
        }
        return this.auth.getProjectId();
    }
    getInstance(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                name: request.name || '',
            });
        this.initialize();
        return this.innerApiCalls.getInstance(request, options, callback);
    }
    listInstances(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        this.initialize();
        return this.innerApiCalls.listInstances(request, options, callback);
    }
    updateInstance(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                name: request.name || '',
            });
        this.initialize();
        return this.innerApiCalls.updateInstance(request, options, callback);
    }
    deleteInstance(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                name: request.name || '',
            });
        this.initialize();
        return this.innerApiCalls.deleteInstance(request, options, callback);
    }
    getCluster(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                name: request.name || '',
            });
        this.initialize();
        return this.innerApiCalls.getCluster(request, options, callback);
    }
    listClusters(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        this.initialize();
        return this.innerApiCalls.listClusters(request, options, callback);
    }
    deleteCluster(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                name: request.name || '',
            });
        this.initialize();
        return this.innerApiCalls.deleteCluster(request, options, callback);
    }
    createAppProfile(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        this.initialize();
        return this.innerApiCalls.createAppProfile(request, options, callback);
    }
    getAppProfile(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                name: request.name || '',
            });
        this.initialize();
        return this.innerApiCalls.getAppProfile(request, options, callback);
    }
    deleteAppProfile(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                name: request.name || '',
            });
        this.initialize();
        return this.innerApiCalls.deleteAppProfile(request, options, callback);
    }
    getIamPolicy(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                resource: request.resource || '',
            });
        this.initialize();
        return this.innerApiCalls.getIamPolicy(request, options, callback);
    }
    setIamPolicy(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                resource: request.resource || '',
            });
        this.initialize();
        return this.innerApiCalls.setIamPolicy(request, options, callback);
    }
    testIamPermissions(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                resource: request.resource || '',
            });
        this.initialize();
        return this.innerApiCalls.testIamPermissions(request, options, callback);
    }
    createInstance(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        this.initialize();
        return this.innerApiCalls.createInstance(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `createInstance()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/bigtable_instance_admin.create_instance.js</caption>
     * region_tag:bigtableadmin_v2_generated_BigtableInstanceAdmin_CreateInstance_async
     */
    async checkCreateInstanceProgress(name) {
        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.createInstance, gax.createDefaultBackoffSettings());
        return decodeOperation;
    }
    partialUpdateInstance(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                'instance.name': request.instance.name || '',
            });
        this.initialize();
        return this.innerApiCalls.partialUpdateInstance(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `partialUpdateInstance()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/bigtable_instance_admin.partial_update_instance.js</caption>
     * region_tag:bigtableadmin_v2_generated_BigtableInstanceAdmin_PartialUpdateInstance_async
     */
    async checkPartialUpdateInstanceProgress(name) {
        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.partialUpdateInstance, gax.createDefaultBackoffSettings());
        return decodeOperation;
    }
    createCluster(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        this.initialize();
        return this.innerApiCalls.createCluster(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `createCluster()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/bigtable_instance_admin.create_cluster.js</caption>
     * region_tag:bigtableadmin_v2_generated_BigtableInstanceAdmin_CreateCluster_async
     */
    async checkCreateClusterProgress(name) {
        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.createCluster, gax.createDefaultBackoffSettings());
        return decodeOperation;
    }
    updateCluster(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                name: request.name || '',
            });
        this.initialize();
        return this.innerApiCalls.updateCluster(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `updateCluster()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/bigtable_instance_admin.update_cluster.js</caption>
     * region_tag:bigtableadmin_v2_generated_BigtableInstanceAdmin_UpdateCluster_async
     */
    async checkUpdateClusterProgress(name) {
        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.updateCluster, gax.createDefaultBackoffSettings());
        return decodeOperation;
    }
    partialUpdateCluster(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                'cluster.name': request.cluster.name || '',
            });
        this.initialize();
        return this.innerApiCalls.partialUpdateCluster(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `partialUpdateCluster()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/bigtable_instance_admin.partial_update_cluster.js</caption>
     * region_tag:bigtableadmin_v2_generated_BigtableInstanceAdmin_PartialUpdateCluster_async
     */
    async checkPartialUpdateClusterProgress(name) {
        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.partialUpdateCluster, gax.createDefaultBackoffSettings());
        return decodeOperation;
    }
    updateAppProfile(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                'app_profile.name': request.appProfile.name || '',
            });
        this.initialize();
        return this.innerApiCalls.updateAppProfile(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `updateAppProfile()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/bigtable_instance_admin.update_app_profile.js</caption>
     * region_tag:bigtableadmin_v2_generated_BigtableInstanceAdmin_UpdateAppProfile_async
     */
    async checkUpdateAppProfileProgress(name) {
        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.updateAppProfile, gax.createDefaultBackoffSettings());
        return decodeOperation;
    }
    listAppProfiles(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        this.initialize();
        return this.innerApiCalls.listAppProfiles(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The unique name of the instance for which a list of app profiles is
     *   requested. Values are of the form
     *   `projects/{project}/instances/{instance}`.
     *   Use `{instance} = '-'` to list AppProfiles for all Instances in a project,
     *   e.g., `projects/myproject/instances/-`.
     * @param {number} request.pageSize
     *   Maximum number of results per page.
     *
     *   A page_size of zero lets the server choose the number of items to return.
     *   A page_size which is strictly positive will return at most that many items.
     *   A negative page_size will cause an error.
     *
     *   Following the first request, subsequent paginated calls are not required
     *   to pass a page_size. If a page_size is set in subsequent calls, it must
     *   match the page_size given in the first request.
     * @param {string} request.pageToken
     *   The value of `next_page_token` returned by a previous call.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [AppProfile]{@link google.bigtable.admin.v2.AppProfile} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listAppProfilesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listAppProfilesStream(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        const defaultCallSettings = this._defaults['listAppProfiles'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listAppProfiles.createStream(this.innerApiCalls.listAppProfiles, request, callSettings);
    }
    /**
     * Equivalent to `listAppProfiles`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The unique name of the instance for which a list of app profiles is
     *   requested. Values are of the form
     *   `projects/{project}/instances/{instance}`.
     *   Use `{instance} = '-'` to list AppProfiles for all Instances in a project,
     *   e.g., `projects/myproject/instances/-`.
     * @param {number} request.pageSize
     *   Maximum number of results per page.
     *
     *   A page_size of zero lets the server choose the number of items to return.
     *   A page_size which is strictly positive will return at most that many items.
     *   A negative page_size will cause an error.
     *
     *   Following the first request, subsequent paginated calls are not required
     *   to pass a page_size. If a page_size is set in subsequent calls, it must
     *   match the page_size given in the first request.
     * @param {string} request.pageToken
     *   The value of `next_page_token` returned by a previous call.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [AppProfile]{@link google.bigtable.admin.v2.AppProfile}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/bigtable_instance_admin.list_app_profiles.js</caption>
     * region_tag:bigtableadmin_v2_generated_BigtableInstanceAdmin_ListAppProfiles_async
     */
    listAppProfilesAsync(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        const defaultCallSettings = this._defaults['listAppProfiles'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listAppProfiles.asyncIterate(this.innerApiCalls['listAppProfiles'], request, callSettings);
    }
    listHotTablets(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        this.initialize();
        return this.innerApiCalls.listHotTablets(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The cluster name to list hot tablets.
     *   Value is in the following form:
     *   `projects/{project}/instances/{instance}/clusters/{cluster}`.
     * @param {google.protobuf.Timestamp} request.startTime
     *   The start time to list hot tablets. The hot tablets in the response will
     *   have start times between the requested start time and end time. Start time
     *   defaults to Now if it is unset, and end time defaults to Now - 24 hours if
     *   it is unset. The start time should be less than the end time, and the
     *   maximum allowed time range between start time and end time is 48 hours.
     *   Start time and end time should have values between Now and Now - 14 days.
     * @param {google.protobuf.Timestamp} request.endTime
     *   The end time to list hot tablets.
     * @param {number} request.pageSize
     *   Maximum number of results per page.
     *
     *   A page_size that is empty or zero lets the server choose the number of
     *   items to return. A page_size which is strictly positive will return at most
     *   that many items. A negative page_size will cause an error.
     *
     *   Following the first request, subsequent paginated calls do not need a
     *   page_size field. If a page_size is set in subsequent calls, it must match
     *   the page_size given in the first request.
     * @param {string} request.pageToken
     *   The value of `next_page_token` returned by a previous call.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [HotTablet]{@link google.bigtable.admin.v2.HotTablet} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listHotTabletsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listHotTabletsStream(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        const defaultCallSettings = this._defaults['listHotTablets'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listHotTablets.createStream(this.innerApiCalls.listHotTablets, request, callSettings);
    }
    /**
     * Equivalent to `listHotTablets`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The cluster name to list hot tablets.
     *   Value is in the following form:
     *   `projects/{project}/instances/{instance}/clusters/{cluster}`.
     * @param {google.protobuf.Timestamp} request.startTime
     *   The start time to list hot tablets. The hot tablets in the response will
     *   have start times between the requested start time and end time. Start time
     *   defaults to Now if it is unset, and end time defaults to Now - 24 hours if
     *   it is unset. The start time should be less than the end time, and the
     *   maximum allowed time range between start time and end time is 48 hours.
     *   Start time and end time should have values between Now and Now - 14 days.
     * @param {google.protobuf.Timestamp} request.endTime
     *   The end time to list hot tablets.
     * @param {number} request.pageSize
     *   Maximum number of results per page.
     *
     *   A page_size that is empty or zero lets the server choose the number of
     *   items to return. A page_size which is strictly positive will return at most
     *   that many items. A negative page_size will cause an error.
     *
     *   Following the first request, subsequent paginated calls do not need a
     *   page_size field. If a page_size is set in subsequent calls, it must match
     *   the page_size given in the first request.
     * @param {string} request.pageToken
     *   The value of `next_page_token` returned by a previous call.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [HotTablet]{@link google.bigtable.admin.v2.HotTablet}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/bigtable_instance_admin.list_hot_tablets.js</caption>
     * region_tag:bigtableadmin_v2_generated_BigtableInstanceAdmin_ListHotTablets_async
     */
    listHotTabletsAsync(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        const defaultCallSettings = this._defaults['listHotTablets'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listHotTablets.asyncIterate(this.innerApiCalls['listHotTablets'], request, callSettings);
    }
    // --------------------
    // -- Path templates --
    // --------------------
    /**
     * Return a fully-qualified appProfile resource name string.
     *
     * @param {string} project
     * @param {string} instance
     * @param {string} app_profile
     * @returns {string} Resource name string.
     */
    appProfilePath(project, instance, appProfile) {
        return this.pathTemplates.appProfilePathTemplate.render({
            project: project,
            instance: instance,
            app_profile: appProfile,
        });
    }
    /**
     * Parse the project from AppProfile resource.
     *
     * @param {string} appProfileName
     *   A fully-qualified path representing AppProfile resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromAppProfileName(appProfileName) {
        return this.pathTemplates.appProfilePathTemplate.match(appProfileName)
            .project;
    }
    /**
     * Parse the instance from AppProfile resource.
     *
     * @param {string} appProfileName
     *   A fully-qualified path representing AppProfile resource.
     * @returns {string} A string representing the instance.
     */
    matchInstanceFromAppProfileName(appProfileName) {
        return this.pathTemplates.appProfilePathTemplate.match(appProfileName)
            .instance;
    }
    /**
     * Parse the app_profile from AppProfile resource.
     *
     * @param {string} appProfileName
     *   A fully-qualified path representing AppProfile resource.
     * @returns {string} A string representing the app_profile.
     */
    matchAppProfileFromAppProfileName(appProfileName) {
        return this.pathTemplates.appProfilePathTemplate.match(appProfileName)
            .app_profile;
    }
    /**
     * Return a fully-qualified backup resource name string.
     *
     * @param {string} project
     * @param {string} instance
     * @param {string} cluster
     * @param {string} backup
     * @returns {string} Resource name string.
     */
    backupPath(project, instance, cluster, backup) {
        return this.pathTemplates.backupPathTemplate.render({
            project: project,
            instance: instance,
            cluster: cluster,
            backup: backup,
        });
    }
    /**
     * Parse the project from Backup resource.
     *
     * @param {string} backupName
     *   A fully-qualified path representing Backup resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromBackupName(backupName) {
        return this.pathTemplates.backupPathTemplate.match(backupName).project;
    }
    /**
     * Parse the instance from Backup resource.
     *
     * @param {string} backupName
     *   A fully-qualified path representing Backup resource.
     * @returns {string} A string representing the instance.
     */
    matchInstanceFromBackupName(backupName) {
        return this.pathTemplates.backupPathTemplate.match(backupName).instance;
    }
    /**
     * Parse the cluster from Backup resource.
     *
     * @param {string} backupName
     *   A fully-qualified path representing Backup resource.
     * @returns {string} A string representing the cluster.
     */
    matchClusterFromBackupName(backupName) {
        return this.pathTemplates.backupPathTemplate.match(backupName).cluster;
    }
    /**
     * Parse the backup from Backup resource.
     *
     * @param {string} backupName
     *   A fully-qualified path representing Backup resource.
     * @returns {string} A string representing the backup.
     */
    matchBackupFromBackupName(backupName) {
        return this.pathTemplates.backupPathTemplate.match(backupName).backup;
    }
    /**
     * Return a fully-qualified cluster resource name string.
     *
     * @param {string} project
     * @param {string} instance
     * @param {string} cluster
     * @returns {string} Resource name string.
     */
    clusterPath(project, instance, cluster) {
        return this.pathTemplates.clusterPathTemplate.render({
            project: project,
            instance: instance,
            cluster: cluster,
        });
    }
    /**
     * Parse the project from Cluster resource.
     *
     * @param {string} clusterName
     *   A fully-qualified path representing Cluster resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromClusterName(clusterName) {
        return this.pathTemplates.clusterPathTemplate.match(clusterName).project;
    }
    /**
     * Parse the instance from Cluster resource.
     *
     * @param {string} clusterName
     *   A fully-qualified path representing Cluster resource.
     * @returns {string} A string representing the instance.
     */
    matchInstanceFromClusterName(clusterName) {
        return this.pathTemplates.clusterPathTemplate.match(clusterName).instance;
    }
    /**
     * Parse the cluster from Cluster resource.
     *
     * @param {string} clusterName
     *   A fully-qualified path representing Cluster resource.
     * @returns {string} A string representing the cluster.
     */
    matchClusterFromClusterName(clusterName) {
        return this.pathTemplates.clusterPathTemplate.match(clusterName).cluster;
    }
    /**
     * Return a fully-qualified hotTablet resource name string.
     *
     * @param {string} project
     * @param {string} instance
     * @param {string} cluster
     * @param {string} hot_tablet
     * @returns {string} Resource name string.
     */
    hotTabletPath(project, instance, cluster, hotTablet) {
        return this.pathTemplates.hotTabletPathTemplate.render({
            project: project,
            instance: instance,
            cluster: cluster,
            hot_tablet: hotTablet,
        });
    }
    /**
     * Parse the project from HotTablet resource.
     *
     * @param {string} hotTabletName
     *   A fully-qualified path representing HotTablet resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromHotTabletName(hotTabletName) {
        return this.pathTemplates.hotTabletPathTemplate.match(hotTabletName)
            .project;
    }
    /**
     * Parse the instance from HotTablet resource.
     *
     * @param {string} hotTabletName
     *   A fully-qualified path representing HotTablet resource.
     * @returns {string} A string representing the instance.
     */
    matchInstanceFromHotTabletName(hotTabletName) {
        return this.pathTemplates.hotTabletPathTemplate.match(hotTabletName)
            .instance;
    }
    /**
     * Parse the cluster from HotTablet resource.
     *
     * @param {string} hotTabletName
     *   A fully-qualified path representing HotTablet resource.
     * @returns {string} A string representing the cluster.
     */
    matchClusterFromHotTabletName(hotTabletName) {
        return this.pathTemplates.hotTabletPathTemplate.match(hotTabletName)
            .cluster;
    }
    /**
     * Parse the hot_tablet from HotTablet resource.
     *
     * @param {string} hotTabletName
     *   A fully-qualified path representing HotTablet resource.
     * @returns {string} A string representing the hot_tablet.
     */
    matchHotTabletFromHotTabletName(hotTabletName) {
        return this.pathTemplates.hotTabletPathTemplate.match(hotTabletName)
            .hot_tablet;
    }
    /**
     * Return a fully-qualified instance resource name string.
     *
     * @param {string} project
     * @param {string} instance
     * @returns {string} Resource name string.
     */
    instancePath(project, instance) {
        return this.pathTemplates.instancePathTemplate.render({
            project: project,
            instance: instance,
        });
    }
    /**
     * Parse the project from Instance resource.
     *
     * @param {string} instanceName
     *   A fully-qualified path representing Instance resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromInstanceName(instanceName) {
        return this.pathTemplates.instancePathTemplate.match(instanceName).project;
    }
    /**
     * Parse the instance from Instance resource.
     *
     * @param {string} instanceName
     *   A fully-qualified path representing Instance resource.
     * @returns {string} A string representing the instance.
     */
    matchInstanceFromInstanceName(instanceName) {
        return this.pathTemplates.instancePathTemplate.match(instanceName).instance;
    }
    /**
     * Return a fully-qualified project resource name string.
     *
     * @param {string} project
     * @returns {string} Resource name string.
     */
    projectPath(project) {
        return this.pathTemplates.projectPathTemplate.render({
            project: project,
        });
    }
    /**
     * Parse the project from Project resource.
     *
     * @param {string} projectName
     *   A fully-qualified path representing Project resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectName(projectName) {
        return this.pathTemplates.projectPathTemplate.match(projectName).project;
    }
    /**
     * Return a fully-qualified snapshot resource name string.
     *
     * @param {string} project
     * @param {string} instance
     * @param {string} cluster
     * @param {string} snapshot
     * @returns {string} Resource name string.
     */
    snapshotPath(project, instance, cluster, snapshot) {
        return this.pathTemplates.snapshotPathTemplate.render({
            project: project,
            instance: instance,
            cluster: cluster,
            snapshot: snapshot,
        });
    }
    /**
     * Parse the project from Snapshot resource.
     *
     * @param {string} snapshotName
     *   A fully-qualified path representing Snapshot resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromSnapshotName(snapshotName) {
        return this.pathTemplates.snapshotPathTemplate.match(snapshotName).project;
    }
    /**
     * Parse the instance from Snapshot resource.
     *
     * @param {string} snapshotName
     *   A fully-qualified path representing Snapshot resource.
     * @returns {string} A string representing the instance.
     */
    matchInstanceFromSnapshotName(snapshotName) {
        return this.pathTemplates.snapshotPathTemplate.match(snapshotName).instance;
    }
    /**
     * Parse the cluster from Snapshot resource.
     *
     * @param {string} snapshotName
     *   A fully-qualified path representing Snapshot resource.
     * @returns {string} A string representing the cluster.
     */
    matchClusterFromSnapshotName(snapshotName) {
        return this.pathTemplates.snapshotPathTemplate.match(snapshotName).cluster;
    }
    /**
     * Parse the snapshot from Snapshot resource.
     *
     * @param {string} snapshotName
     *   A fully-qualified path representing Snapshot resource.
     * @returns {string} A string representing the snapshot.
     */
    matchSnapshotFromSnapshotName(snapshotName) {
        return this.pathTemplates.snapshotPathTemplate.match(snapshotName).snapshot;
    }
    /**
     * Return a fully-qualified table resource name string.
     *
     * @param {string} project
     * @param {string} instance
     * @param {string} table
     * @returns {string} Resource name string.
     */
    tablePath(project, instance, table) {
        return this.pathTemplates.tablePathTemplate.render({
            project: project,
            instance: instance,
            table: table,
        });
    }
    /**
     * Parse the project from Table resource.
     *
     * @param {string} tableName
     *   A fully-qualified path representing Table resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTableName(tableName) {
        return this.pathTemplates.tablePathTemplate.match(tableName).project;
    }
    /**
     * Parse the instance from Table resource.
     *
     * @param {string} tableName
     *   A fully-qualified path representing Table resource.
     * @returns {string} A string representing the instance.
     */
    matchInstanceFromTableName(tableName) {
        return this.pathTemplates.tablePathTemplate.match(tableName).instance;
    }
    /**
     * Parse the table from Table resource.
     *
     * @param {string} tableName
     *   A fully-qualified path representing Table resource.
     * @returns {string} A string representing the table.
     */
    matchTableFromTableName(tableName) {
        return this.pathTemplates.tablePathTemplate.match(tableName).table;
    }
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close() {
        if (this.bigtableInstanceAdminStub && !this._terminated) {
            return this.bigtableInstanceAdminStub.then(stub => {
                this._terminated = true;
                stub.close();
                this.operationsClient.close();
            });
        }
        return Promise.resolve();
    }
}
exports.BigtableInstanceAdminClient = BigtableInstanceAdminClient;
//# sourceMappingURL=bigtable_instance_admin_client.js.map