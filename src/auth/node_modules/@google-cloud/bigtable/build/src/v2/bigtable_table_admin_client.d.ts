/// <reference types="node" />
import * as gax from 'google-gax';
import { Callback, CallOptions, Descriptors, ClientOptions, LROperation, PaginationCallback } from 'google-gax';
import { Transform } from 'stream';
import * as protos from '../../protos/protos';
/**
 *  Service for creating, configuring, and deleting Cloud Bigtable tables.
 *
 *
 *  Provides access to the table schemas only, not the data stored within
 *  the tables.
 * @class
 * @memberof v2
 */
export declare class BigtableTableAdminClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    operationsClient: gax.OperationsClient;
    bigtableTableAdminStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of BigtableTableAdminClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP fallback mode.
     *     In fallback mode, a special browser-compatible transport implementation is used
     *     instead of gRPC transport. In browser context (if the `window` object is defined)
     *     the fallback mode is enabled automatically; set `options.fallback` to `false`
     *     if you need to override this behavior.
     */
    constructor(opts?: ClientOptions);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    /**
     * Creates a new table in the specified instance.
     * The table can be created with a full set of initial column families,
     * specified in the request.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The unique name of the instance in which to create the table.
     *   Values are of the form `projects/{project}/instances/{instance}`.
     * @param {string} request.tableId
     *   Required. The name by which the new table should be referred to within the parent
     *   instance, e.g., `foobar` rather than `{parent}/tables/foobar`.
     *   Maximum 50 characters.
     * @param {google.bigtable.admin.v2.Table} request.table
     *   Required. The Table to create.
     * @param {number[]} request.initialSplits
     *   The optional list of row keys that will be used to initially split the
     *   table into several tablets (tablets are similar to HBase regions).
     *   Given two split keys, `s1` and `s2`, three tablets will be created,
     *   spanning the key ranges: `[, s1), [s1, s2), [s2, )`.
     *
     *   Example:
     *
     *   * Row keys := `["a", "apple", "custom", "customer_1", "customer_2",`
     *                  `"other", "zz"]`
     *   * initial_split_keys := `["apple", "customer_1", "customer_2", "other"]`
     *   * Key assignment:
     *       - Tablet 1 `[, apple)                => {"a"}.`
     *       - Tablet 2 `[apple, customer_1)      => {"apple", "custom"}.`
     *       - Tablet 3 `[customer_1, customer_2) => {"customer_1"}.`
     *       - Tablet 4 `[customer_2, other)      => {"customer_2"}.`
     *       - Tablet 5 `[other, )                => {"other", "zz"}.`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [Table]{@link google.bigtable.admin.v2.Table}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/bigtable_table_admin.create_table.js</caption>
     * region_tag:bigtableadmin_v2_generated_BigtableTableAdmin_CreateTable_async
     */
    createTable(request?: protos.google.bigtable.admin.v2.ICreateTableRequest, options?: CallOptions): Promise<[protos.google.bigtable.admin.v2.ITable, protos.google.bigtable.admin.v2.ICreateTableRequest | undefined, {} | undefined]>;
    createTable(request: protos.google.bigtable.admin.v2.ICreateTableRequest, options: CallOptions, callback: Callback<protos.google.bigtable.admin.v2.ITable, protos.google.bigtable.admin.v2.ICreateTableRequest | null | undefined, {} | null | undefined>): void;
    createTable(request: protos.google.bigtable.admin.v2.ICreateTableRequest, callback: Callback<protos.google.bigtable.admin.v2.ITable, protos.google.bigtable.admin.v2.ICreateTableRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets metadata information about the specified table.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The unique name of the requested table.
     *   Values are of the form
     *   `projects/{project}/instances/{instance}/tables/{table}`.
     * @param {google.bigtable.admin.v2.Table.View} request.view
     *   The view to be applied to the returned table's fields.
     *   Defaults to `SCHEMA_VIEW` if unspecified.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [Table]{@link google.bigtable.admin.v2.Table}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/bigtable_table_admin.get_table.js</caption>
     * region_tag:bigtableadmin_v2_generated_BigtableTableAdmin_GetTable_async
     */
    getTable(request?: protos.google.bigtable.admin.v2.IGetTableRequest, options?: CallOptions): Promise<[protos.google.bigtable.admin.v2.ITable, protos.google.bigtable.admin.v2.IGetTableRequest | undefined, {} | undefined]>;
    getTable(request: protos.google.bigtable.admin.v2.IGetTableRequest, options: CallOptions, callback: Callback<protos.google.bigtable.admin.v2.ITable, protos.google.bigtable.admin.v2.IGetTableRequest | null | undefined, {} | null | undefined>): void;
    getTable(request: protos.google.bigtable.admin.v2.IGetTableRequest, callback: Callback<protos.google.bigtable.admin.v2.ITable, protos.google.bigtable.admin.v2.IGetTableRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Permanently deletes a specified table and all of its data.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The unique name of the table to be deleted.
     *   Values are of the form
     *   `projects/{project}/instances/{instance}/tables/{table}`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/bigtable_table_admin.delete_table.js</caption>
     * region_tag:bigtableadmin_v2_generated_BigtableTableAdmin_DeleteTable_async
     */
    deleteTable(request?: protos.google.bigtable.admin.v2.IDeleteTableRequest, options?: CallOptions): Promise<[protos.google.protobuf.IEmpty, protos.google.bigtable.admin.v2.IDeleteTableRequest | undefined, {} | undefined]>;
    deleteTable(request: protos.google.bigtable.admin.v2.IDeleteTableRequest, options: CallOptions, callback: Callback<protos.google.protobuf.IEmpty, protos.google.bigtable.admin.v2.IDeleteTableRequest | null | undefined, {} | null | undefined>): void;
    deleteTable(request: protos.google.bigtable.admin.v2.IDeleteTableRequest, callback: Callback<protos.google.protobuf.IEmpty, protos.google.bigtable.admin.v2.IDeleteTableRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Performs a series of column family modifications on the specified table.
     * Either all or none of the modifications will occur before this method
     * returns, but data requests received prior to that point may see a table
     * where only some modifications have taken effect.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The unique name of the table whose families should be modified.
     *   Values are of the form
     *   `projects/{project}/instances/{instance}/tables/{table}`.
     * @param {number[]} request.modifications
     *   Required. Modifications to be atomically applied to the specified table's families.
     *   Entries are applied in order, meaning that earlier modifications can be
     *   masked by later ones (in the case of repeated updates to the same family,
     *   for example).
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [Table]{@link google.bigtable.admin.v2.Table}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/bigtable_table_admin.modify_column_families.js</caption>
     * region_tag:bigtableadmin_v2_generated_BigtableTableAdmin_ModifyColumnFamilies_async
     */
    modifyColumnFamilies(request?: protos.google.bigtable.admin.v2.IModifyColumnFamiliesRequest, options?: CallOptions): Promise<[protos.google.bigtable.admin.v2.ITable, protos.google.bigtable.admin.v2.IModifyColumnFamiliesRequest | undefined, {} | undefined]>;
    modifyColumnFamilies(request: protos.google.bigtable.admin.v2.IModifyColumnFamiliesRequest, options: CallOptions, callback: Callback<protos.google.bigtable.admin.v2.ITable, protos.google.bigtable.admin.v2.IModifyColumnFamiliesRequest | null | undefined, {} | null | undefined>): void;
    modifyColumnFamilies(request: protos.google.bigtable.admin.v2.IModifyColumnFamiliesRequest, callback: Callback<protos.google.bigtable.admin.v2.ITable, protos.google.bigtable.admin.v2.IModifyColumnFamiliesRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Permanently drop/delete a row range from a specified table. The request can
     * specify whether to delete all rows in a table, or only those that match a
     * particular prefix.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The unique name of the table on which to drop a range of rows.
     *   Values are of the form
     *   `projects/{project}/instances/{instance}/tables/{table}`.
     * @param {Buffer} request.rowKeyPrefix
     *   Delete all rows that start with this row key prefix. Prefix cannot be
     *   zero length.
     * @param {boolean} request.deleteAllDataFromTable
     *   Delete all rows in the table. Setting this to false is a no-op.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/bigtable_table_admin.drop_row_range.js</caption>
     * region_tag:bigtableadmin_v2_generated_BigtableTableAdmin_DropRowRange_async
     */
    dropRowRange(request?: protos.google.bigtable.admin.v2.IDropRowRangeRequest, options?: CallOptions): Promise<[protos.google.protobuf.IEmpty, protos.google.bigtable.admin.v2.IDropRowRangeRequest | undefined, {} | undefined]>;
    dropRowRange(request: protos.google.bigtable.admin.v2.IDropRowRangeRequest, options: CallOptions, callback: Callback<protos.google.protobuf.IEmpty, protos.google.bigtable.admin.v2.IDropRowRangeRequest | null | undefined, {} | null | undefined>): void;
    dropRowRange(request: protos.google.bigtable.admin.v2.IDropRowRangeRequest, callback: Callback<protos.google.protobuf.IEmpty, protos.google.bigtable.admin.v2.IDropRowRangeRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Generates a consistency token for a Table, which can be used in
     * CheckConsistency to check whether mutations to the table that finished
     * before this call started have been replicated. The tokens will be available
     * for 90 days.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The unique name of the Table for which to create a consistency token.
     *   Values are of the form
     *   `projects/{project}/instances/{instance}/tables/{table}`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [GenerateConsistencyTokenResponse]{@link google.bigtable.admin.v2.GenerateConsistencyTokenResponse}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/bigtable_table_admin.generate_consistency_token.js</caption>
     * region_tag:bigtableadmin_v2_generated_BigtableTableAdmin_GenerateConsistencyToken_async
     */
    generateConsistencyToken(request?: protos.google.bigtable.admin.v2.IGenerateConsistencyTokenRequest, options?: CallOptions): Promise<[protos.google.bigtable.admin.v2.IGenerateConsistencyTokenResponse, (protos.google.bigtable.admin.v2.IGenerateConsistencyTokenRequest | undefined), {} | undefined]>;
    generateConsistencyToken(request: protos.google.bigtable.admin.v2.IGenerateConsistencyTokenRequest, options: CallOptions, callback: Callback<protos.google.bigtable.admin.v2.IGenerateConsistencyTokenResponse, protos.google.bigtable.admin.v2.IGenerateConsistencyTokenRequest | null | undefined, {} | null | undefined>): void;
    generateConsistencyToken(request: protos.google.bigtable.admin.v2.IGenerateConsistencyTokenRequest, callback: Callback<protos.google.bigtable.admin.v2.IGenerateConsistencyTokenResponse, protos.google.bigtable.admin.v2.IGenerateConsistencyTokenRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Checks replication consistency based on a consistency token, that is, if
     * replication has caught up based on the conditions specified in the token
     * and the check request.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The unique name of the Table for which to check replication consistency.
     *   Values are of the form
     *   `projects/{project}/instances/{instance}/tables/{table}`.
     * @param {string} request.consistencyToken
     *   Required. The token created using GenerateConsistencyToken for the Table.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [CheckConsistencyResponse]{@link google.bigtable.admin.v2.CheckConsistencyResponse}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/bigtable_table_admin.check_consistency.js</caption>
     * region_tag:bigtableadmin_v2_generated_BigtableTableAdmin_CheckConsistency_async
     */
    checkConsistency(request?: protos.google.bigtable.admin.v2.ICheckConsistencyRequest, options?: CallOptions): Promise<[protos.google.bigtable.admin.v2.ICheckConsistencyResponse, protos.google.bigtable.admin.v2.ICheckConsistencyRequest | undefined, {} | undefined]>;
    checkConsistency(request: protos.google.bigtable.admin.v2.ICheckConsistencyRequest, options: CallOptions, callback: Callback<protos.google.bigtable.admin.v2.ICheckConsistencyResponse, protos.google.bigtable.admin.v2.ICheckConsistencyRequest | null | undefined, {} | null | undefined>): void;
    checkConsistency(request: protos.google.bigtable.admin.v2.ICheckConsistencyRequest, callback: Callback<protos.google.bigtable.admin.v2.ICheckConsistencyResponse, protos.google.bigtable.admin.v2.ICheckConsistencyRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets metadata information about the specified snapshot.
     *
     * Note: This is a private alpha release of Cloud Bigtable snapshots. This
     * feature is not currently available to most Cloud Bigtable customers. This
     * feature might be changed in backward-incompatible ways and is not
     * recommended for production use. It is not subject to any SLA or deprecation
     * policy.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The unique name of the requested snapshot.
     *   Values are of the form
     *   `projects/{project}/instances/{instance}/clusters/{cluster}/snapshots/{snapshot}`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [Snapshot]{@link google.bigtable.admin.v2.Snapshot}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/bigtable_table_admin.get_snapshot.js</caption>
     * region_tag:bigtableadmin_v2_generated_BigtableTableAdmin_GetSnapshot_async
     */
    getSnapshot(request?: protos.google.bigtable.admin.v2.IGetSnapshotRequest, options?: CallOptions): Promise<[protos.google.bigtable.admin.v2.ISnapshot, protos.google.bigtable.admin.v2.IGetSnapshotRequest | undefined, {} | undefined]>;
    getSnapshot(request: protos.google.bigtable.admin.v2.IGetSnapshotRequest, options: CallOptions, callback: Callback<protos.google.bigtable.admin.v2.ISnapshot, protos.google.bigtable.admin.v2.IGetSnapshotRequest | null | undefined, {} | null | undefined>): void;
    getSnapshot(request: protos.google.bigtable.admin.v2.IGetSnapshotRequest, callback: Callback<protos.google.bigtable.admin.v2.ISnapshot, protos.google.bigtable.admin.v2.IGetSnapshotRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Permanently deletes the specified snapshot.
     *
     * Note: This is a private alpha release of Cloud Bigtable snapshots. This
     * feature is not currently available to most Cloud Bigtable customers. This
     * feature might be changed in backward-incompatible ways and is not
     * recommended for production use. It is not subject to any SLA or deprecation
     * policy.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The unique name of the snapshot to be deleted.
     *   Values are of the form
     *   `projects/{project}/instances/{instance}/clusters/{cluster}/snapshots/{snapshot}`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/bigtable_table_admin.delete_snapshot.js</caption>
     * region_tag:bigtableadmin_v2_generated_BigtableTableAdmin_DeleteSnapshot_async
     */
    deleteSnapshot(request?: protos.google.bigtable.admin.v2.IDeleteSnapshotRequest, options?: CallOptions): Promise<[protos.google.protobuf.IEmpty, protos.google.bigtable.admin.v2.IDeleteSnapshotRequest | undefined, {} | undefined]>;
    deleteSnapshot(request: protos.google.bigtable.admin.v2.IDeleteSnapshotRequest, options: CallOptions, callback: Callback<protos.google.protobuf.IEmpty, protos.google.bigtable.admin.v2.IDeleteSnapshotRequest | null | undefined, {} | null | undefined>): void;
    deleteSnapshot(request: protos.google.bigtable.admin.v2.IDeleteSnapshotRequest, callback: Callback<protos.google.protobuf.IEmpty, protos.google.bigtable.admin.v2.IDeleteSnapshotRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets metadata on a pending or completed Cloud Bigtable Backup.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Name of the backup.
     *   Values are of the form
     *   `projects/{project}/instances/{instance}/clusters/{cluster}/backups/{backup}`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [Backup]{@link google.bigtable.admin.v2.Backup}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/bigtable_table_admin.get_backup.js</caption>
     * region_tag:bigtableadmin_v2_generated_BigtableTableAdmin_GetBackup_async
     */
    getBackup(request?: protos.google.bigtable.admin.v2.IGetBackupRequest, options?: CallOptions): Promise<[protos.google.bigtable.admin.v2.IBackup, protos.google.bigtable.admin.v2.IGetBackupRequest | undefined, {} | undefined]>;
    getBackup(request: protos.google.bigtable.admin.v2.IGetBackupRequest, options: CallOptions, callback: Callback<protos.google.bigtable.admin.v2.IBackup, protos.google.bigtable.admin.v2.IGetBackupRequest | null | undefined, {} | null | undefined>): void;
    getBackup(request: protos.google.bigtable.admin.v2.IGetBackupRequest, callback: Callback<protos.google.bigtable.admin.v2.IBackup, protos.google.bigtable.admin.v2.IGetBackupRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Updates a pending or completed Cloud Bigtable Backup.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.bigtable.admin.v2.Backup} request.backup
     *   Required. The backup to update. `backup.name`, and the fields to be updated
     *   as specified by `update_mask` are required. Other fields are ignored.
     *   Update is only supported for the following fields:
     *    * `backup.expire_time`.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Required. A mask specifying which fields (e.g. `expire_time`) in the
     *   Backup resource should be updated. This mask is relative to the Backup
     *   resource, not to the request message. The field mask must always be
     *   specified; this prevents any future fields from being erased accidentally
     *   by clients that do not know about them.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [Backup]{@link google.bigtable.admin.v2.Backup}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/bigtable_table_admin.update_backup.js</caption>
     * region_tag:bigtableadmin_v2_generated_BigtableTableAdmin_UpdateBackup_async
     */
    updateBackup(request?: protos.google.bigtable.admin.v2.IUpdateBackupRequest, options?: CallOptions): Promise<[protos.google.bigtable.admin.v2.IBackup, protos.google.bigtable.admin.v2.IUpdateBackupRequest | undefined, {} | undefined]>;
    updateBackup(request: protos.google.bigtable.admin.v2.IUpdateBackupRequest, options: CallOptions, callback: Callback<protos.google.bigtable.admin.v2.IBackup, protos.google.bigtable.admin.v2.IUpdateBackupRequest | null | undefined, {} | null | undefined>): void;
    updateBackup(request: protos.google.bigtable.admin.v2.IUpdateBackupRequest, callback: Callback<protos.google.bigtable.admin.v2.IBackup, protos.google.bigtable.admin.v2.IUpdateBackupRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Deletes a pending or completed Cloud Bigtable backup.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Name of the backup to delete.
     *   Values are of the form
     *   `projects/{project}/instances/{instance}/clusters/{cluster}/backups/{backup}`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/bigtable_table_admin.delete_backup.js</caption>
     * region_tag:bigtableadmin_v2_generated_BigtableTableAdmin_DeleteBackup_async
     */
    deleteBackup(request?: protos.google.bigtable.admin.v2.IDeleteBackupRequest, options?: CallOptions): Promise<[protos.google.protobuf.IEmpty, protos.google.bigtable.admin.v2.IDeleteBackupRequest | undefined, {} | undefined]>;
    deleteBackup(request: protos.google.bigtable.admin.v2.IDeleteBackupRequest, options: CallOptions, callback: Callback<protos.google.protobuf.IEmpty, protos.google.bigtable.admin.v2.IDeleteBackupRequest | null | undefined, {} | null | undefined>): void;
    deleteBackup(request: protos.google.bigtable.admin.v2.IDeleteBackupRequest, callback: Callback<protos.google.protobuf.IEmpty, protos.google.bigtable.admin.v2.IDeleteBackupRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets the access control policy for a Table or Backup resource.
     * Returns an empty policy if the resource exists but does not have a policy
     * set.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.resource
     *   REQUIRED: The resource for which the policy is being requested.
     *   See the operation documentation for the appropriate value for this field.
     * @param {google.iam.v1.GetPolicyOptions} request.options
     *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
     *   `GetIamPolicy`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/bigtable_table_admin.get_iam_policy.js</caption>
     * region_tag:bigtableadmin_v2_generated_BigtableTableAdmin_GetIamPolicy_async
     */
    getIamPolicy(request?: protos.google.iam.v1.IGetIamPolicyRequest, options?: CallOptions): Promise<[protos.google.iam.v1.IPolicy, protos.google.iam.v1.IGetIamPolicyRequest | undefined, {} | undefined]>;
    getIamPolicy(request: protos.google.iam.v1.IGetIamPolicyRequest, options: CallOptions, callback: Callback<protos.google.iam.v1.IPolicy, protos.google.iam.v1.IGetIamPolicyRequest | null | undefined, {} | null | undefined>): void;
    getIamPolicy(request: protos.google.iam.v1.IGetIamPolicyRequest, callback: Callback<protos.google.iam.v1.IPolicy, protos.google.iam.v1.IGetIamPolicyRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Sets the access control policy on a Table or Backup resource.
     * Replaces any existing policy.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.resource
     *   REQUIRED: The resource for which the policy is being specified.
     *   See the operation documentation for the appropriate value for this field.
     * @param {google.iam.v1.Policy} request.policy
     *   REQUIRED: The complete policy to be applied to the `resource`. The size of
     *   the policy is limited to a few 10s of KB. An empty policy is a
     *   valid policy but certain Cloud Platform services (such as Projects)
     *   might reject them.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
     *   the fields in the mask will be modified. If no mask is provided, the
     *   following default mask is used:
     *
     *   `paths: "bindings, etag"`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/bigtable_table_admin.set_iam_policy.js</caption>
     * region_tag:bigtableadmin_v2_generated_BigtableTableAdmin_SetIamPolicy_async
     */
    setIamPolicy(request?: protos.google.iam.v1.ISetIamPolicyRequest, options?: CallOptions): Promise<[protos.google.iam.v1.IPolicy, protos.google.iam.v1.ISetIamPolicyRequest | undefined, {} | undefined]>;
    setIamPolicy(request: protos.google.iam.v1.ISetIamPolicyRequest, options: CallOptions, callback: Callback<protos.google.iam.v1.IPolicy, protos.google.iam.v1.ISetIamPolicyRequest | null | undefined, {} | null | undefined>): void;
    setIamPolicy(request: protos.google.iam.v1.ISetIamPolicyRequest, callback: Callback<protos.google.iam.v1.IPolicy, protos.google.iam.v1.ISetIamPolicyRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Returns permissions that the caller has on the specified Table or Backup resource.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.resource
     *   REQUIRED: The resource for which the policy detail is being requested.
     *   See the operation documentation for the appropriate value for this field.
     * @param {string[]} request.permissions
     *   The set of permissions to check for the `resource`. Permissions with
     *   wildcards (such as '*' or 'storage.*') are not allowed. For more
     *   information see
     *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/bigtable_table_admin.test_iam_permissions.js</caption>
     * region_tag:bigtableadmin_v2_generated_BigtableTableAdmin_TestIamPermissions_async
     */
    testIamPermissions(request?: protos.google.iam.v1.ITestIamPermissionsRequest, options?: CallOptions): Promise<[protos.google.iam.v1.ITestIamPermissionsResponse, protos.google.iam.v1.ITestIamPermissionsRequest | undefined, {} | undefined]>;
    testIamPermissions(request: protos.google.iam.v1.ITestIamPermissionsRequest, options: CallOptions, callback: Callback<protos.google.iam.v1.ITestIamPermissionsResponse, protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined, {} | null | undefined>): void;
    testIamPermissions(request: protos.google.iam.v1.ITestIamPermissionsRequest, callback: Callback<protos.google.iam.v1.ITestIamPermissionsResponse, protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Creates a new table from the specified snapshot. The target table must
     * not exist. The snapshot and the table must be in the same instance.
     *
     * Note: This is a private alpha release of Cloud Bigtable snapshots. This
     * feature is not currently available to most Cloud Bigtable customers. This
     * feature might be changed in backward-incompatible ways and is not
     * recommended for production use. It is not subject to any SLA or deprecation
     * policy.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The unique name of the instance in which to create the table.
     *   Values are of the form `projects/{project}/instances/{instance}`.
     * @param {string} request.tableId
     *   Required. The name by which the new table should be referred to within the parent
     *   instance, e.g., `foobar` rather than `{parent}/tables/foobar`.
     * @param {string} request.sourceSnapshot
     *   Required. The unique name of the snapshot from which to restore the table. The
     *   snapshot and the table must be in the same instance.
     *   Values are of the form
     *   `projects/{project}/instances/{instance}/clusters/{cluster}/snapshots/{snapshot}`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/bigtable_table_admin.create_table_from_snapshot.js</caption>
     * region_tag:bigtableadmin_v2_generated_BigtableTableAdmin_CreateTableFromSnapshot_async
     */
    createTableFromSnapshot(request?: protos.google.bigtable.admin.v2.ICreateTableFromSnapshotRequest, options?: CallOptions): Promise<[LROperation<protos.google.bigtable.admin.v2.ITable, protos.google.bigtable.admin.v2.ICreateTableFromSnapshotMetadata>, protos.google.longrunning.IOperation | undefined, {} | undefined]>;
    createTableFromSnapshot(request: protos.google.bigtable.admin.v2.ICreateTableFromSnapshotRequest, options: CallOptions, callback: Callback<LROperation<protos.google.bigtable.admin.v2.ITable, protos.google.bigtable.admin.v2.ICreateTableFromSnapshotMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createTableFromSnapshot(request: protos.google.bigtable.admin.v2.ICreateTableFromSnapshotRequest, callback: Callback<LROperation<protos.google.bigtable.admin.v2.ITable, protos.google.bigtable.admin.v2.ICreateTableFromSnapshotMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `createTableFromSnapshot()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/bigtable_table_admin.create_table_from_snapshot.js</caption>
     * region_tag:bigtableadmin_v2_generated_BigtableTableAdmin_CreateTableFromSnapshot_async
     */
    checkCreateTableFromSnapshotProgress(name: string): Promise<LROperation<protos.google.bigtable.admin.v2.Table, protos.google.bigtable.admin.v2.CreateTableFromSnapshotMetadata>>;
    /**
     * Creates a new snapshot in the specified cluster from the specified
     * source table. The cluster and the table must be in the same instance.
     *
     * Note: This is a private alpha release of Cloud Bigtable snapshots. This
     * feature is not currently available to most Cloud Bigtable customers. This
     * feature might be changed in backward-incompatible ways and is not
     * recommended for production use. It is not subject to any SLA or deprecation
     * policy.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The unique name of the table to have the snapshot taken.
     *   Values are of the form
     *   `projects/{project}/instances/{instance}/tables/{table}`.
     * @param {string} request.cluster
     *   Required. The name of the cluster where the snapshot will be created in.
     *   Values are of the form
     *   `projects/{project}/instances/{instance}/clusters/{cluster}`.
     * @param {string} request.snapshotId
     *   Required. The ID by which the new snapshot should be referred to within the parent
     *   cluster, e.g., `mysnapshot` of the form: `{@link -_.a-zA-Z0-9|_a-zA-Z0-9}*`
     *   rather than
     *   `projects/{project}/instances/{instance}/clusters/{cluster}/snapshots/mysnapshot`.
     * @param {google.protobuf.Duration} request.ttl
     *   The amount of time that the new snapshot can stay active after it is
     *   created. Once 'ttl' expires, the snapshot will get deleted. The maximum
     *   amount of time a snapshot can stay active is 7 days. If 'ttl' is not
     *   specified, the default value of 24 hours will be used.
     * @param {string} request.description
     *   Description of the snapshot.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/bigtable_table_admin.snapshot_table.js</caption>
     * region_tag:bigtableadmin_v2_generated_BigtableTableAdmin_SnapshotTable_async
     */
    snapshotTable(request?: protos.google.bigtable.admin.v2.ISnapshotTableRequest, options?: CallOptions): Promise<[LROperation<protos.google.bigtable.admin.v2.ISnapshot, protos.google.bigtable.admin.v2.ISnapshotTableMetadata>, protos.google.longrunning.IOperation | undefined, {} | undefined]>;
    snapshotTable(request: protos.google.bigtable.admin.v2.ISnapshotTableRequest, options: CallOptions, callback: Callback<LROperation<protos.google.bigtable.admin.v2.ISnapshot, protos.google.bigtable.admin.v2.ISnapshotTableMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    snapshotTable(request: protos.google.bigtable.admin.v2.ISnapshotTableRequest, callback: Callback<LROperation<protos.google.bigtable.admin.v2.ISnapshot, protos.google.bigtable.admin.v2.ISnapshotTableMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `snapshotTable()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/bigtable_table_admin.snapshot_table.js</caption>
     * region_tag:bigtableadmin_v2_generated_BigtableTableAdmin_SnapshotTable_async
     */
    checkSnapshotTableProgress(name: string): Promise<LROperation<protos.google.bigtable.admin.v2.Snapshot, protos.google.bigtable.admin.v2.SnapshotTableMetadata>>;
    /**
     * Starts creating a new Cloud Bigtable Backup.  The returned backup
     * {@link google.longrunning.Operation|long-running operation} can be used to
     * track creation of the backup. The
     * {@link google.longrunning.Operation.metadata|metadata} field type is
     * {@link google.bigtable.admin.v2.CreateBackupMetadata|CreateBackupMetadata}. The
     * {@link google.longrunning.Operation.response|response} field type is
     * {@link google.bigtable.admin.v2.Backup|Backup}, if successful. Cancelling the returned operation will stop the
     * creation and delete the backup.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. This must be one of the clusters in the instance in which this
     *   table is located. The backup will be stored in this cluster. Values are
     *   of the form `projects/{project}/instances/{instance}/clusters/{cluster}`.
     * @param {string} request.backupId
     *   Required. The id of the backup to be created. The `backup_id` along with
     *   the parent `parent` are combined as {parent}/backups/{backup_id} to create
     *   the full backup name, of the form:
     *   `projects/{project}/instances/{instance}/clusters/{cluster}/backups/{backup_id}`.
     *   This string must be between 1 and 50 characters in length and match the
     *   regex {@link -_.a-zA-Z0-9|_a-zA-Z0-9}*.
     * @param {google.bigtable.admin.v2.Backup} request.backup
     *   Required. The backup to create.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/bigtable_table_admin.create_backup.js</caption>
     * region_tag:bigtableadmin_v2_generated_BigtableTableAdmin_CreateBackup_async
     */
    createBackup(request?: protos.google.bigtable.admin.v2.ICreateBackupRequest, options?: CallOptions): Promise<[LROperation<protos.google.bigtable.admin.v2.IBackup, protos.google.bigtable.admin.v2.ICreateBackupMetadata>, protos.google.longrunning.IOperation | undefined, {} | undefined]>;
    createBackup(request: protos.google.bigtable.admin.v2.ICreateBackupRequest, options: CallOptions, callback: Callback<LROperation<protos.google.bigtable.admin.v2.IBackup, protos.google.bigtable.admin.v2.ICreateBackupMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createBackup(request: protos.google.bigtable.admin.v2.ICreateBackupRequest, callback: Callback<LROperation<protos.google.bigtable.admin.v2.IBackup, protos.google.bigtable.admin.v2.ICreateBackupMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `createBackup()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/bigtable_table_admin.create_backup.js</caption>
     * region_tag:bigtableadmin_v2_generated_BigtableTableAdmin_CreateBackup_async
     */
    checkCreateBackupProgress(name: string): Promise<LROperation<protos.google.bigtable.admin.v2.Backup, protos.google.bigtable.admin.v2.CreateBackupMetadata>>;
    /**
     * Create a new table by restoring from a completed backup. The new table
     * must be in the same project as the instance containing the backup.  The
     * returned table {@link google.longrunning.Operation|long-running operation} can
     * be used to track the progress of the operation, and to cancel it.  The
     * {@link google.longrunning.Operation.metadata|metadata} field type is
     * {@link google.bigtable.admin.RestoreTableMetadata|RestoreTableMetadata}.  The
     * {@link google.longrunning.Operation.response|response} type is
     * {@link google.bigtable.admin.v2.Table|Table}, if successful.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The name of the instance in which to create the restored
     *   table. This instance must be in the same project as the source backup.
     *   Values are of the form `projects/<project>/instances/<instance>`.
     * @param {string} request.tableId
     *   Required. The id of the table to create and restore to. This
     *   table must not already exist. The `table_id` appended to
     *   `parent` forms the full table name of the form
     *   `projects/<project>/instances/<instance>/tables/<table_id>`.
     * @param {string} request.backup
     *   Name of the backup from which to restore.  Values are of the form
     *   `projects/<project>/instances/<instance>/clusters/<cluster>/backups/<backup>`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/bigtable_table_admin.restore_table.js</caption>
     * region_tag:bigtableadmin_v2_generated_BigtableTableAdmin_RestoreTable_async
     */
    restoreTable(request?: protos.google.bigtable.admin.v2.IRestoreTableRequest, options?: CallOptions): Promise<[LROperation<protos.google.bigtable.admin.v2.ITable, protos.google.bigtable.admin.v2.IRestoreTableMetadata>, protos.google.longrunning.IOperation | undefined, {} | undefined]>;
    restoreTable(request: protos.google.bigtable.admin.v2.IRestoreTableRequest, options: CallOptions, callback: Callback<LROperation<protos.google.bigtable.admin.v2.ITable, protos.google.bigtable.admin.v2.IRestoreTableMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    restoreTable(request: protos.google.bigtable.admin.v2.IRestoreTableRequest, callback: Callback<LROperation<protos.google.bigtable.admin.v2.ITable, protos.google.bigtable.admin.v2.IRestoreTableMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `restoreTable()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/bigtable_table_admin.restore_table.js</caption>
     * region_tag:bigtableadmin_v2_generated_BigtableTableAdmin_RestoreTable_async
     */
    checkRestoreTableProgress(name: string): Promise<LROperation<protos.google.bigtable.admin.v2.Table, protos.google.bigtable.admin.v2.RestoreTableMetadata>>;
    /**
     * Lists all tables served from a specified instance.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The unique name of the instance for which tables should be listed.
     *   Values are of the form `projects/{project}/instances/{instance}`.
     * @param {google.bigtable.admin.v2.Table.View} request.view
     *   The view to be applied to the returned tables' fields.
     *   Only NAME_ONLY view (default) and REPLICATION_VIEW are supported.
     * @param {number} request.pageSize
     *   Maximum number of results per page.
     *
     *   A page_size of zero lets the server choose the number of items to return.
     *   A page_size which is strictly positive will return at most that many items.
     *   A negative page_size will cause an error.
     *
     *   Following the first request, subsequent paginated calls are not required
     *   to pass a page_size. If a page_size is set in subsequent calls, it must
     *   match the page_size given in the first request.
     * @param {string} request.pageToken
     *   The value of `next_page_token` returned by a previous call.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of [Table]{@link google.bigtable.admin.v2.Table}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listTablesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listTables(request?: protos.google.bigtable.admin.v2.IListTablesRequest, options?: CallOptions): Promise<[protos.google.bigtable.admin.v2.ITable[], protos.google.bigtable.admin.v2.IListTablesRequest | null, protos.google.bigtable.admin.v2.IListTablesResponse]>;
    listTables(request: protos.google.bigtable.admin.v2.IListTablesRequest, options: CallOptions, callback: PaginationCallback<protos.google.bigtable.admin.v2.IListTablesRequest, protos.google.bigtable.admin.v2.IListTablesResponse | null | undefined, protos.google.bigtable.admin.v2.ITable>): void;
    listTables(request: protos.google.bigtable.admin.v2.IListTablesRequest, callback: PaginationCallback<protos.google.bigtable.admin.v2.IListTablesRequest, protos.google.bigtable.admin.v2.IListTablesResponse | null | undefined, protos.google.bigtable.admin.v2.ITable>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The unique name of the instance for which tables should be listed.
     *   Values are of the form `projects/{project}/instances/{instance}`.
     * @param {google.bigtable.admin.v2.Table.View} request.view
     *   The view to be applied to the returned tables' fields.
     *   Only NAME_ONLY view (default) and REPLICATION_VIEW are supported.
     * @param {number} request.pageSize
     *   Maximum number of results per page.
     *
     *   A page_size of zero lets the server choose the number of items to return.
     *   A page_size which is strictly positive will return at most that many items.
     *   A negative page_size will cause an error.
     *
     *   Following the first request, subsequent paginated calls are not required
     *   to pass a page_size. If a page_size is set in subsequent calls, it must
     *   match the page_size given in the first request.
     * @param {string} request.pageToken
     *   The value of `next_page_token` returned by a previous call.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [Table]{@link google.bigtable.admin.v2.Table} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listTablesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listTablesStream(request?: protos.google.bigtable.admin.v2.IListTablesRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listTables`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The unique name of the instance for which tables should be listed.
     *   Values are of the form `projects/{project}/instances/{instance}`.
     * @param {google.bigtable.admin.v2.Table.View} request.view
     *   The view to be applied to the returned tables' fields.
     *   Only NAME_ONLY view (default) and REPLICATION_VIEW are supported.
     * @param {number} request.pageSize
     *   Maximum number of results per page.
     *
     *   A page_size of zero lets the server choose the number of items to return.
     *   A page_size which is strictly positive will return at most that many items.
     *   A negative page_size will cause an error.
     *
     *   Following the first request, subsequent paginated calls are not required
     *   to pass a page_size. If a page_size is set in subsequent calls, it must
     *   match the page_size given in the first request.
     * @param {string} request.pageToken
     *   The value of `next_page_token` returned by a previous call.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [Table]{@link google.bigtable.admin.v2.Table}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/bigtable_table_admin.list_tables.js</caption>
     * region_tag:bigtableadmin_v2_generated_BigtableTableAdmin_ListTables_async
     */
    listTablesAsync(request?: protos.google.bigtable.admin.v2.IListTablesRequest, options?: CallOptions): AsyncIterable<protos.google.bigtable.admin.v2.ITable>;
    /**
     * Lists all snapshots associated with the specified cluster.
     *
     * Note: This is a private alpha release of Cloud Bigtable snapshots. This
     * feature is not currently available to most Cloud Bigtable customers. This
     * feature might be changed in backward-incompatible ways and is not
     * recommended for production use. It is not subject to any SLA or deprecation
     * policy.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The unique name of the cluster for which snapshots should be listed.
     *   Values are of the form
     *   `projects/{project}/instances/{instance}/clusters/{cluster}`.
     *   Use `{cluster} = '-'` to list snapshots for all clusters in an instance,
     *   e.g., `projects/{project}/instances/{instance}/clusters/-`.
     * @param {number} request.pageSize
     *   The maximum number of snapshots to return per page.
     *   CURRENTLY UNIMPLEMENTED AND IGNORED.
     * @param {string} request.pageToken
     *   The value of `next_page_token` returned by a previous call.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of [Snapshot]{@link google.bigtable.admin.v2.Snapshot}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listSnapshotsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listSnapshots(request?: protos.google.bigtable.admin.v2.IListSnapshotsRequest, options?: CallOptions): Promise<[protos.google.bigtable.admin.v2.ISnapshot[], protos.google.bigtable.admin.v2.IListSnapshotsRequest | null, protos.google.bigtable.admin.v2.IListSnapshotsResponse]>;
    listSnapshots(request: protos.google.bigtable.admin.v2.IListSnapshotsRequest, options: CallOptions, callback: PaginationCallback<protos.google.bigtable.admin.v2.IListSnapshotsRequest, protos.google.bigtable.admin.v2.IListSnapshotsResponse | null | undefined, protos.google.bigtable.admin.v2.ISnapshot>): void;
    listSnapshots(request: protos.google.bigtable.admin.v2.IListSnapshotsRequest, callback: PaginationCallback<protos.google.bigtable.admin.v2.IListSnapshotsRequest, protos.google.bigtable.admin.v2.IListSnapshotsResponse | null | undefined, protos.google.bigtable.admin.v2.ISnapshot>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The unique name of the cluster for which snapshots should be listed.
     *   Values are of the form
     *   `projects/{project}/instances/{instance}/clusters/{cluster}`.
     *   Use `{cluster} = '-'` to list snapshots for all clusters in an instance,
     *   e.g., `projects/{project}/instances/{instance}/clusters/-`.
     * @param {number} request.pageSize
     *   The maximum number of snapshots to return per page.
     *   CURRENTLY UNIMPLEMENTED AND IGNORED.
     * @param {string} request.pageToken
     *   The value of `next_page_token` returned by a previous call.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [Snapshot]{@link google.bigtable.admin.v2.Snapshot} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listSnapshotsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listSnapshotsStream(request?: protos.google.bigtable.admin.v2.IListSnapshotsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listSnapshots`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The unique name of the cluster for which snapshots should be listed.
     *   Values are of the form
     *   `projects/{project}/instances/{instance}/clusters/{cluster}`.
     *   Use `{cluster} = '-'` to list snapshots for all clusters in an instance,
     *   e.g., `projects/{project}/instances/{instance}/clusters/-`.
     * @param {number} request.pageSize
     *   The maximum number of snapshots to return per page.
     *   CURRENTLY UNIMPLEMENTED AND IGNORED.
     * @param {string} request.pageToken
     *   The value of `next_page_token` returned by a previous call.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [Snapshot]{@link google.bigtable.admin.v2.Snapshot}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/bigtable_table_admin.list_snapshots.js</caption>
     * region_tag:bigtableadmin_v2_generated_BigtableTableAdmin_ListSnapshots_async
     */
    listSnapshotsAsync(request?: protos.google.bigtable.admin.v2.IListSnapshotsRequest, options?: CallOptions): AsyncIterable<protos.google.bigtable.admin.v2.ISnapshot>;
    /**
     * Lists Cloud Bigtable backups. Returns both completed and pending
     * backups.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The cluster to list backups from.  Values are of the
     *   form `projects/{project}/instances/{instance}/clusters/{cluster}`.
     *   Use `{cluster} = '-'` to list backups for all clusters in an instance,
     *   e.g., `projects/{project}/instances/{instance}/clusters/-`.
     * @param {string} request.filter
     *   A filter expression that filters backups listed in the response.
     *   The expression must specify the field name, a comparison operator,
     *   and the value that you want to use for filtering. The value must be a
     *   string, a number, or a boolean. The comparison operator must be
     *   <, >, <=, >=, !=, =, or :. Colon ':' represents a HAS operator which is
     *   roughly synonymous with equality. Filter rules are case insensitive.
     *
     *   The fields eligible for filtering are:
     *     * `name`
     *     * `source_table`
     *     * `state`
     *     * `start_time` (and values are of the format YYYY-MM-DDTHH:MM:SSZ)
     *     * `end_time` (and values are of the format YYYY-MM-DDTHH:MM:SSZ)
     *     * `expire_time` (and values are of the format YYYY-MM-DDTHH:MM:SSZ)
     *     * `size_bytes`
     *
     *   To filter on multiple expressions, provide each separate expression within
     *   parentheses. By default, each expression is an AND expression. However,
     *   you can include AND, OR, and NOT expressions explicitly.
     *
     *   Some examples of using filters are:
     *
     *     * `name:"exact"` --> The backup's name is the string "exact".
     *     * `name:howl` --> The backup's name contains the string "howl".
     *     * `source_table:prod`
     *            --> The source_table's name contains the string "prod".
     *     * `state:CREATING` --> The backup is pending creation.
     *     * `state:READY` --> The backup is fully created and ready for use.
     *     * `(name:howl) AND (start_time < \"2018-03-28T14:50:00Z\")`
     *            --> The backup name contains the string "howl" and start_time
     *                of the backup is before 2018-03-28T14:50:00Z.
     *     * `size_bytes > 10000000000` --> The backup's size is greater than 10GB
     * @param {string} request.orderBy
     *   An expression for specifying the sort order of the results of the request.
     *   The string value should specify one or more fields in {@link google.bigtable.admin.v2.Backup|Backup}. The full
     *   syntax is described at https://aip.dev/132#ordering.
     *
     *   Fields supported are:
     *      * name
     *      * source_table
     *      * expire_time
     *      * start_time
     *      * end_time
     *      * size_bytes
     *      * state
     *
     *   For example, "start_time". The default sorting order is ascending.
     *   To specify descending order for the field, a suffix " desc" should
     *   be appended to the field name. For example, "start_time desc".
     *   Redundant space characters in the syntax are insigificant.
     *
     *   If order_by is empty, results will be sorted by `start_time` in descending
     *   order starting from the most recently created backup.
     * @param {number} request.pageSize
     *   Number of backups to be returned in the response. If 0 or
     *   less, defaults to the server's maximum allowed page size.
     * @param {string} request.pageToken
     *   If non-empty, `page_token` should contain a
     *   {@link google.bigtable.admin.v2.ListBackupsResponse.next_page_token|next_page_token} from a
     *   previous {@link google.bigtable.admin.v2.ListBackupsResponse|ListBackupsResponse} to the same `parent` and with the same
     *   `filter`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of [Backup]{@link google.bigtable.admin.v2.Backup}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listBackupsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listBackups(request?: protos.google.bigtable.admin.v2.IListBackupsRequest, options?: CallOptions): Promise<[protos.google.bigtable.admin.v2.IBackup[], protos.google.bigtable.admin.v2.IListBackupsRequest | null, protos.google.bigtable.admin.v2.IListBackupsResponse]>;
    listBackups(request: protos.google.bigtable.admin.v2.IListBackupsRequest, options: CallOptions, callback: PaginationCallback<protos.google.bigtable.admin.v2.IListBackupsRequest, protos.google.bigtable.admin.v2.IListBackupsResponse | null | undefined, protos.google.bigtable.admin.v2.IBackup>): void;
    listBackups(request: protos.google.bigtable.admin.v2.IListBackupsRequest, callback: PaginationCallback<protos.google.bigtable.admin.v2.IListBackupsRequest, protos.google.bigtable.admin.v2.IListBackupsResponse | null | undefined, protos.google.bigtable.admin.v2.IBackup>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The cluster to list backups from.  Values are of the
     *   form `projects/{project}/instances/{instance}/clusters/{cluster}`.
     *   Use `{cluster} = '-'` to list backups for all clusters in an instance,
     *   e.g., `projects/{project}/instances/{instance}/clusters/-`.
     * @param {string} request.filter
     *   A filter expression that filters backups listed in the response.
     *   The expression must specify the field name, a comparison operator,
     *   and the value that you want to use for filtering. The value must be a
     *   string, a number, or a boolean. The comparison operator must be
     *   <, >, <=, >=, !=, =, or :. Colon ':' represents a HAS operator which is
     *   roughly synonymous with equality. Filter rules are case insensitive.
     *
     *   The fields eligible for filtering are:
     *     * `name`
     *     * `source_table`
     *     * `state`
     *     * `start_time` (and values are of the format YYYY-MM-DDTHH:MM:SSZ)
     *     * `end_time` (and values are of the format YYYY-MM-DDTHH:MM:SSZ)
     *     * `expire_time` (and values are of the format YYYY-MM-DDTHH:MM:SSZ)
     *     * `size_bytes`
     *
     *   To filter on multiple expressions, provide each separate expression within
     *   parentheses. By default, each expression is an AND expression. However,
     *   you can include AND, OR, and NOT expressions explicitly.
     *
     *   Some examples of using filters are:
     *
     *     * `name:"exact"` --> The backup's name is the string "exact".
     *     * `name:howl` --> The backup's name contains the string "howl".
     *     * `source_table:prod`
     *            --> The source_table's name contains the string "prod".
     *     * `state:CREATING` --> The backup is pending creation.
     *     * `state:READY` --> The backup is fully created and ready for use.
     *     * `(name:howl) AND (start_time < \"2018-03-28T14:50:00Z\")`
     *            --> The backup name contains the string "howl" and start_time
     *                of the backup is before 2018-03-28T14:50:00Z.
     *     * `size_bytes > 10000000000` --> The backup's size is greater than 10GB
     * @param {string} request.orderBy
     *   An expression for specifying the sort order of the results of the request.
     *   The string value should specify one or more fields in {@link google.bigtable.admin.v2.Backup|Backup}. The full
     *   syntax is described at https://aip.dev/132#ordering.
     *
     *   Fields supported are:
     *      * name
     *      * source_table
     *      * expire_time
     *      * start_time
     *      * end_time
     *      * size_bytes
     *      * state
     *
     *   For example, "start_time". The default sorting order is ascending.
     *   To specify descending order for the field, a suffix " desc" should
     *   be appended to the field name. For example, "start_time desc".
     *   Redundant space characters in the syntax are insigificant.
     *
     *   If order_by is empty, results will be sorted by `start_time` in descending
     *   order starting from the most recently created backup.
     * @param {number} request.pageSize
     *   Number of backups to be returned in the response. If 0 or
     *   less, defaults to the server's maximum allowed page size.
     * @param {string} request.pageToken
     *   If non-empty, `page_token` should contain a
     *   {@link google.bigtable.admin.v2.ListBackupsResponse.next_page_token|next_page_token} from a
     *   previous {@link google.bigtable.admin.v2.ListBackupsResponse|ListBackupsResponse} to the same `parent` and with the same
     *   `filter`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [Backup]{@link google.bigtable.admin.v2.Backup} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listBackupsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listBackupsStream(request?: protos.google.bigtable.admin.v2.IListBackupsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listBackups`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The cluster to list backups from.  Values are of the
     *   form `projects/{project}/instances/{instance}/clusters/{cluster}`.
     *   Use `{cluster} = '-'` to list backups for all clusters in an instance,
     *   e.g., `projects/{project}/instances/{instance}/clusters/-`.
     * @param {string} request.filter
     *   A filter expression that filters backups listed in the response.
     *   The expression must specify the field name, a comparison operator,
     *   and the value that you want to use for filtering. The value must be a
     *   string, a number, or a boolean. The comparison operator must be
     *   <, >, <=, >=, !=, =, or :. Colon ':' represents a HAS operator which is
     *   roughly synonymous with equality. Filter rules are case insensitive.
     *
     *   The fields eligible for filtering are:
     *     * `name`
     *     * `source_table`
     *     * `state`
     *     * `start_time` (and values are of the format YYYY-MM-DDTHH:MM:SSZ)
     *     * `end_time` (and values are of the format YYYY-MM-DDTHH:MM:SSZ)
     *     * `expire_time` (and values are of the format YYYY-MM-DDTHH:MM:SSZ)
     *     * `size_bytes`
     *
     *   To filter on multiple expressions, provide each separate expression within
     *   parentheses. By default, each expression is an AND expression. However,
     *   you can include AND, OR, and NOT expressions explicitly.
     *
     *   Some examples of using filters are:
     *
     *     * `name:"exact"` --> The backup's name is the string "exact".
     *     * `name:howl` --> The backup's name contains the string "howl".
     *     * `source_table:prod`
     *            --> The source_table's name contains the string "prod".
     *     * `state:CREATING` --> The backup is pending creation.
     *     * `state:READY` --> The backup is fully created and ready for use.
     *     * `(name:howl) AND (start_time < \"2018-03-28T14:50:00Z\")`
     *            --> The backup name contains the string "howl" and start_time
     *                of the backup is before 2018-03-28T14:50:00Z.
     *     * `size_bytes > 10000000000` --> The backup's size is greater than 10GB
     * @param {string} request.orderBy
     *   An expression for specifying the sort order of the results of the request.
     *   The string value should specify one or more fields in {@link google.bigtable.admin.v2.Backup|Backup}. The full
     *   syntax is described at https://aip.dev/132#ordering.
     *
     *   Fields supported are:
     *      * name
     *      * source_table
     *      * expire_time
     *      * start_time
     *      * end_time
     *      * size_bytes
     *      * state
     *
     *   For example, "start_time". The default sorting order is ascending.
     *   To specify descending order for the field, a suffix " desc" should
     *   be appended to the field name. For example, "start_time desc".
     *   Redundant space characters in the syntax are insigificant.
     *
     *   If order_by is empty, results will be sorted by `start_time` in descending
     *   order starting from the most recently created backup.
     * @param {number} request.pageSize
     *   Number of backups to be returned in the response. If 0 or
     *   less, defaults to the server's maximum allowed page size.
     * @param {string} request.pageToken
     *   If non-empty, `page_token` should contain a
     *   {@link google.bigtable.admin.v2.ListBackupsResponse.next_page_token|next_page_token} from a
     *   previous {@link google.bigtable.admin.v2.ListBackupsResponse|ListBackupsResponse} to the same `parent` and with the same
     *   `filter`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [Backup]{@link google.bigtable.admin.v2.Backup}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/bigtable_table_admin.list_backups.js</caption>
     * region_tag:bigtableadmin_v2_generated_BigtableTableAdmin_ListBackups_async
     */
    listBackupsAsync(request?: protos.google.bigtable.admin.v2.IListBackupsRequest, options?: CallOptions): AsyncIterable<protos.google.bigtable.admin.v2.IBackup>;
    /**
     * Return a fully-qualified appProfile resource name string.
     *
     * @param {string} project
     * @param {string} instance
     * @param {string} app_profile
     * @returns {string} Resource name string.
     */
    appProfilePath(project: string, instance: string, appProfile: string): string;
    /**
     * Parse the project from AppProfile resource.
     *
     * @param {string} appProfileName
     *   A fully-qualified path representing AppProfile resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromAppProfileName(appProfileName: string): string | number;
    /**
     * Parse the instance from AppProfile resource.
     *
     * @param {string} appProfileName
     *   A fully-qualified path representing AppProfile resource.
     * @returns {string} A string representing the instance.
     */
    matchInstanceFromAppProfileName(appProfileName: string): string | number;
    /**
     * Parse the app_profile from AppProfile resource.
     *
     * @param {string} appProfileName
     *   A fully-qualified path representing AppProfile resource.
     * @returns {string} A string representing the app_profile.
     */
    matchAppProfileFromAppProfileName(appProfileName: string): string | number;
    /**
     * Return a fully-qualified backup resource name string.
     *
     * @param {string} project
     * @param {string} instance
     * @param {string} cluster
     * @param {string} backup
     * @returns {string} Resource name string.
     */
    backupPath(project: string, instance: string, cluster: string, backup: string): string;
    /**
     * Parse the project from Backup resource.
     *
     * @param {string} backupName
     *   A fully-qualified path representing Backup resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromBackupName(backupName: string): string | number;
    /**
     * Parse the instance from Backup resource.
     *
     * @param {string} backupName
     *   A fully-qualified path representing Backup resource.
     * @returns {string} A string representing the instance.
     */
    matchInstanceFromBackupName(backupName: string): string | number;
    /**
     * Parse the cluster from Backup resource.
     *
     * @param {string} backupName
     *   A fully-qualified path representing Backup resource.
     * @returns {string} A string representing the cluster.
     */
    matchClusterFromBackupName(backupName: string): string | number;
    /**
     * Parse the backup from Backup resource.
     *
     * @param {string} backupName
     *   A fully-qualified path representing Backup resource.
     * @returns {string} A string representing the backup.
     */
    matchBackupFromBackupName(backupName: string): string | number;
    /**
     * Return a fully-qualified cluster resource name string.
     *
     * @param {string} project
     * @param {string} instance
     * @param {string} cluster
     * @returns {string} Resource name string.
     */
    clusterPath(project: string, instance: string, cluster: string): string;
    /**
     * Parse the project from Cluster resource.
     *
     * @param {string} clusterName
     *   A fully-qualified path representing Cluster resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromClusterName(clusterName: string): string | number;
    /**
     * Parse the instance from Cluster resource.
     *
     * @param {string} clusterName
     *   A fully-qualified path representing Cluster resource.
     * @returns {string} A string representing the instance.
     */
    matchInstanceFromClusterName(clusterName: string): string | number;
    /**
     * Parse the cluster from Cluster resource.
     *
     * @param {string} clusterName
     *   A fully-qualified path representing Cluster resource.
     * @returns {string} A string representing the cluster.
     */
    matchClusterFromClusterName(clusterName: string): string | number;
    /**
     * Return a fully-qualified hotTablet resource name string.
     *
     * @param {string} project
     * @param {string} instance
     * @param {string} cluster
     * @param {string} hot_tablet
     * @returns {string} Resource name string.
     */
    hotTabletPath(project: string, instance: string, cluster: string, hotTablet: string): string;
    /**
     * Parse the project from HotTablet resource.
     *
     * @param {string} hotTabletName
     *   A fully-qualified path representing HotTablet resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromHotTabletName(hotTabletName: string): string | number;
    /**
     * Parse the instance from HotTablet resource.
     *
     * @param {string} hotTabletName
     *   A fully-qualified path representing HotTablet resource.
     * @returns {string} A string representing the instance.
     */
    matchInstanceFromHotTabletName(hotTabletName: string): string | number;
    /**
     * Parse the cluster from HotTablet resource.
     *
     * @param {string} hotTabletName
     *   A fully-qualified path representing HotTablet resource.
     * @returns {string} A string representing the cluster.
     */
    matchClusterFromHotTabletName(hotTabletName: string): string | number;
    /**
     * Parse the hot_tablet from HotTablet resource.
     *
     * @param {string} hotTabletName
     *   A fully-qualified path representing HotTablet resource.
     * @returns {string} A string representing the hot_tablet.
     */
    matchHotTabletFromHotTabletName(hotTabletName: string): string | number;
    /**
     * Return a fully-qualified instance resource name string.
     *
     * @param {string} project
     * @param {string} instance
     * @returns {string} Resource name string.
     */
    instancePath(project: string, instance: string): string;
    /**
     * Parse the project from Instance resource.
     *
     * @param {string} instanceName
     *   A fully-qualified path representing Instance resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromInstanceName(instanceName: string): string | number;
    /**
     * Parse the instance from Instance resource.
     *
     * @param {string} instanceName
     *   A fully-qualified path representing Instance resource.
     * @returns {string} A string representing the instance.
     */
    matchInstanceFromInstanceName(instanceName: string): string | number;
    /**
     * Return a fully-qualified snapshot resource name string.
     *
     * @param {string} project
     * @param {string} instance
     * @param {string} cluster
     * @param {string} snapshot
     * @returns {string} Resource name string.
     */
    snapshotPath(project: string, instance: string, cluster: string, snapshot: string): string;
    /**
     * Parse the project from Snapshot resource.
     *
     * @param {string} snapshotName
     *   A fully-qualified path representing Snapshot resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromSnapshotName(snapshotName: string): string | number;
    /**
     * Parse the instance from Snapshot resource.
     *
     * @param {string} snapshotName
     *   A fully-qualified path representing Snapshot resource.
     * @returns {string} A string representing the instance.
     */
    matchInstanceFromSnapshotName(snapshotName: string): string | number;
    /**
     * Parse the cluster from Snapshot resource.
     *
     * @param {string} snapshotName
     *   A fully-qualified path representing Snapshot resource.
     * @returns {string} A string representing the cluster.
     */
    matchClusterFromSnapshotName(snapshotName: string): string | number;
    /**
     * Parse the snapshot from Snapshot resource.
     *
     * @param {string} snapshotName
     *   A fully-qualified path representing Snapshot resource.
     * @returns {string} A string representing the snapshot.
     */
    matchSnapshotFromSnapshotName(snapshotName: string): string | number;
    /**
     * Return a fully-qualified table resource name string.
     *
     * @param {string} project
     * @param {string} instance
     * @param {string} table
     * @returns {string} Resource name string.
     */
    tablePath(project: string, instance: string, table: string): string;
    /**
     * Parse the project from Table resource.
     *
     * @param {string} tableName
     *   A fully-qualified path representing Table resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTableName(tableName: string): string | number;
    /**
     * Parse the instance from Table resource.
     *
     * @param {string} tableName
     *   A fully-qualified path representing Table resource.
     * @returns {string} A string representing the instance.
     */
    matchInstanceFromTableName(tableName: string): string | number;
    /**
     * Parse the table from Table resource.
     *
     * @param {string} tableName
     *   A fully-qualified path representing Table resource.
     * @returns {string} A string representing the table.
     */
    matchTableFromTableName(tableName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}
